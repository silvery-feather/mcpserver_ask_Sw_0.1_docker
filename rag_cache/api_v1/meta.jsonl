{"idx": 0, "path": "D:\\mcpserver\\md\\api-index.md", "title": "Develop", "level": 2, "start_line": 3, "end_line": 7, "sha": "4872abf0fc87159d2738eb199cc3d806", "text": "- [开放接口](/api/py-openapi.md)\n- [环境变量](/api/environment-variable.md)"}
{"idx": 1, "path": "D:\\mcpserver\\md\\api-index.md", "title": "命令行", "level": 2, "start_line": 7, "end_line": 14, "sha": "c943e36148ab70d4335ca0ef5f183d7b", "text": "- [swanlab watch](/api/cli-swanlab-watch.md): 启动离线实验看板\n- [swanlab login](/api/cli-swanlab-login.md): 登录SwanLab\n- [swanlab logout](/api/cli-swanlab-logout.md): 登出SwanLab\n- [swanlab convert](/api/cli-swanlab-convert.md): 将其他产品的日志转换为SwanLab项目\n- [swanlab sync](/api/cli-swanlab-sync.md): 将本地日志同步到SwanLab云端/私有化部署端"}
{"idx": 2, "path": "D:\\mcpserver\\md\\api-index.md", "title": "Python SDK", "level": 2, "start_line": 14, "end_line": 33, "sha": "c6bedd0ab49d33c2726f843d1fd91ef5", "text": "- [init](/api/py-init.md)\n- [login](/api/py-login.md)\n- [Image](/api/py-Image.md)\n- [Audio](/api/py-Audio.md)\n- [Text](/api/py-Text.md)\n- [Video](/api/py-video.md)\n- [ECharts](/api/py-echarts.md)\n- [Object3D](/api/py-object3d.md)\n- [Molecule](/api/py-molecule.md)\n- [pr_curve](/api/py-pr_curve.md)\n- [roc_curve](/api/py-roc_curve.md)\n- [confusion_matrix](/api/py-confusion_matrix.md)\n- [run](/api/py-run.md)\n- [convert](/api/py-converter.md)\n- [sync_wandb](/api/py-sync-wandb.md)\n- [sync_tensorboard](/api/py-sync-tensorboard.md)\n- [sync_mlflow](/api/py-sync-mlflow.md)\n- [register_callback](/api/py-register-callback.md)"}
{"idx": 3, "path": "D:\\mcpserver\\md\\cli-swanlab-convert.md", "title": "swanlab convert", "level": 1, "start_line": 3, "end_line": 21, "sha": "48c9dc260f1b71ca9b249db39d6a2f63", "text": "```bash\nswanlab convert [OPTIONS]\n```\n\n| 选项 | 描述 |\n| --- | --- |\n| `-t`, `--type` | 选择转换类型，可选`tensorboard`、`wandb`、`mlflow`，默认为`tensorboard`。 |\n| `-p`, `--project` | 设置转换创建的SwanLab项目名，默认为None。 |\n| `-w`, `--workspace` | 设置SwanLab项目所在空间，默认为None。 |\n| `-l`, `--logdir` | 设置SwanLab项目的日志文件保存路径，默认为None。 |\n| `--cloud` | 设置SwanLab项目是否将日志上传到云端，默认为True。 |\n| `--tb-logdir` | 需要转换的Tensorboard日志文件路径(tfevent) |\n| `--wb-project` | 需要转换的Wandb项目名 |\n| `--wb-entity` | 需要转换的Wandb项目所在实体 |\n| `--wb-runid` | 需要转换的Wandb Run的id |\n| `--mlflow-uri` | 需要转换的MLFlow项目URI |\n| `--mlflow-exp` | 需要转换的MLFlow实验ID |"}
{"idx": 4, "path": "D:\\mcpserver\\md\\cli-swanlab-convert.md", "title": "介绍", "level": 2, "start_line": 22, "end_line": 26, "sha": "58228ea662b0fe0402461da0afe2c8f4", "text": "将其他日志工具的内容转换为SwanLab项目。  \n支持转换的工具包括：`Tensorboard`、`Weights & Biases`、`MLFlow`。"}
{"idx": 5, "path": "D:\\mcpserver\\md\\cli-swanlab-convert.md", "title": "Tensorboard", "level": 3, "start_line": 29, "end_line": 32, "sha": "aba63367801b8d8bad34be47bdf378d0", "text": "[集成-Tensorboard](/guide_cloud/integration/integration-tensorboard.md)"}
{"idx": 6, "path": "D:\\mcpserver\\md\\cli-swanlab-convert.md", "title": "Weights & Biases", "level": 3, "start_line": 33, "end_line": 36, "sha": "6556e26fb921607a1a33a19a9dcba45e", "text": "[集成-Weights & Biases](/guide_cloud/integration/integration-wandb.md)"}
{"idx": 7, "path": "D:\\mcpserver\\md\\cli-swanlab-convert.md", "title": "MLFlow", "level": 3, "start_line": 37, "end_line": 38, "sha": "1c15610f74e2af947b6ce9fce6f8406c", "text": "[集成-MLFlow](/guide_cloud/integration/integration-mlflow.md)"}
{"idx": 8, "path": "D:\\mcpserver\\md\\cli-swanlab-login.md", "title": "swanlab login", "level": 1, "start_line": 2, "end_line": 57, "sha": "52af2b5fdf3bcb118020219d45b56b07", "text": "``` bash\nswanlab login [OPTIONS]\n```\n\n| 选项 | 描述 |\n| --- | --- |\n| `-r`, `--relogin` | 重新登录。|\n| `-h`, `--host` | 指定SwanLab服务所在的主机。比如`http://localhost:8000`。|\n| `-k`, `--api-key` | 指定API Key。如果您不喜欢使用命令行来输入 API 密钥，这将允许自动登录。|\n| `-w`, `--web-host` | 指定SwanLab前端所在的Web主机。|\n\n## 介绍\n\n登录SwanLab账号，以同步实验到云端。\n\n执行下面的命令后，如果第一次登录，会让你填写[API_KEY](https://swanlab.cn/settings)：\n\n```bash\nswanlab login\n```\n\n登录过一次后，凭证会保存到本地，并覆盖之前登录过的凭证，无需再次通过`swanlab.login`或`swanlab login`登录。\n\n> 如果你不希望凭证保存在本地，请在python脚本中使用[swanlab.login()](./py-login.md)进行登录。\n\n如果你的电脑不太适合命令行粘贴API Key（比如一些Windows CMD）的方式登录，可以使用：\n\n```bash\nswanlab login -k <api-key>\n```\n\n\n## 重新登录\n\n如果需要登录一个别的账号，则用下面的命令：\n\n```bash\nswanlab login --relogin\n```\n\n这会让你输入一个新的API Key以重新登录。\n\n## 退出登录\n\n```bash\nswanlab logout\n```\n\n## 登录到私有化服务\n\n```bash\nswanlab login --host <host>\n```"}
{"idx": 9, "path": "D:\\mcpserver\\md\\cli-swanlab-logout.md", "title": "swanlab logout", "level": 1, "start_line": 3, "end_line": 7, "sha": "94fc32e9f952b248b2c0611c55e5f371", "text": "```bash\nswanlab logout\n```\n\n在编程环境上退出账号。"}
{"idx": 10, "path": "D:\\mcpserver\\md\\cli-swanlab-other.md", "title": "其他CLI命令", "level": 1, "start_line": 2, "end_line": 4, "sha": "a7cf856f94fa8f4c0710a429038aad7d", "text": "- `swanlab -v`：查看SwanLab库版本\n- `swanlab --help`：API帮助"}
{"idx": 11, "path": "D:\\mcpserver\\md\\cli-swanlab-sync.md", "title": "swanlab sync", "level": 1, "start_line": 3, "end_line": 16, "sha": "8d3aa151074ac8c8bb953876b44e2e8f", "text": "```bash\nswanlab sync [options] [logdir]\n```\n\n| 选项 | 描述 |\n| --- | --- |\n| `-k`, `--api-key` | 用于身份验证的API密钥。如果未指定，将使用环境中的默认API密钥。如果指定，将使用此API密钥登录但不会保存密钥。|\n| `-h`, `--host` | 同步日志的主机地址。如果未指定，将使用默认主机(`https://swanlab.cn`)。|\n| `-w`, `--workspace` | 同步日志的工作空间。如果未指定，将使用默认工作空间。|\n| `-p`, `--project` | 同步日志的项目。如果未指定，将使用默认项目。|\n| `-i`, `--id` | 同步日志的实验ID。仅当路径为单个目录时可用。|"}
{"idx": 12, "path": "D:\\mcpserver\\md\\cli-swanlab-sync.md", "title": "介绍", "level": 2, "start_line": 17, "end_line": 20, "sha": "aa1a4a2a565d641babc66d376818abfe", "text": "将本地日志，同步上传到SwanLab云端/私有化部署端。"}
{"idx": 13, "path": "D:\\mcpserver\\md\\cli-swanlab-sync.md", "title": "版本对照", "level": 2, "start_line": 21, "end_line": 29, "sha": "4d67032e69e966e8e9804e1bd333f99f", "text": "> 版本对照仅适用于`swanlab sync`命令\n\n| swanlab库版本 | 特性 | 支持的日志文件 |\n| --- | --- | --- |\n| >=0.6.8 | 支持同步训练异常终端的日志文件；支持`id`参数 | 由`>=0.6.8`版本的swanlab库产生 |\n| <0.6.8 | - | 由`<0.6.8`版本的swanlab库产生 |"}
{"idx": 14, "path": "D:\\mcpserver\\md\\cli-swanlab-sync.md", "title": "命令行示例", "level": 2, "start_line": 30, "end_line": 49, "sha": "ab739afbe7385375db61b134ef751a0f", "text": "找到你需要上传到云端的日志文件目录（默认是`swanlog`下的以`run-`开头的目录），然后执行命令：\n\n```bash\nswanlab sync ./swanlog/run-xxx\n```\n\n::: info\n默认同步到的项目的是日志文件中记录的`project`，即跑该实验时设置的`project`。  \n如果想要同步到其他项目，可以使用`-p`选项指定项目。\n:::\n\n看到下面的打印信息，则表示同步成功：\n\n![swanlab sync](./cli-swanlab-sync/console.png)\n\n完成sync操作后，项目上会多出一个新的实验。"}
{"idx": 15, "path": "D:\\mcpserver\\md\\cli-swanlab-sync.md", "title": "Python代码示例", "level": 2, "start_line": 51, "end_line": 63, "sha": "3d39eef7cc11c31661ee4e13019fdbcc", "text": "```python\nimport swanlab\n\nswanlab.login(api_key=\"你的API Key\")\n\nswanlab.sync(\n    dir_path=\"./swanlog/run-xxx\",\n    workspace=\"swanlab\",\n    project_name=\"sync_test\",\n)\n```"}
{"idx": 16, "path": "D:\\mcpserver\\md\\cli-swanlab-sync.md", "title": "批量上传", "level": 2, "start_line": 65, "end_line": 69, "sha": "f4114a9018e74329249d6f2214fdbfae", "text": "```bash\nswanlab sync ./swanlog/run-*\n```"}
{"idx": 17, "path": "D:\\mcpserver\\md\\cli-swanlab-sync.md", "title": "resume式同步", "level": 2, "start_line": 70, "end_line": 77, "sha": "69d27c46a26a771bee3cb50308bdd045", "text": "如果你不希望创建1个新实验，而是在原本的实验上同步（会自行比对数据，增加差异的部分），可以使用`--id`参数：\n\n```bash\nswanlab sync ./swanlog/run-xxx --id <实验ID>\n```\n\n实验ID获取方式见：[恢复实验/断点续训](/guide_cloud/experiment_track/resume-experiment.md)"}
{"idx": 18, "path": "D:\\mcpserver\\md\\cli-swanlab-watch.md", "title": "swanlab watch", "level": 1, "start_line": 2, "end_line": 55, "sha": "eb535ad7dec68c1f1b008ab22325a812", "text": "``` bash\nswanlab watch [OPTIONS]\n```\n\n| 选项 | 描述 | 例子 |\n| --- | --- | --- |\n| `-p`, `--port` | 设置实验看板Web服务运行的端口，默认为**5092**。 | `swanlab watch -p 8080`：将实验看板Web服务设置为8080端口 |\n| `-h`, `--host` | 设置实验看板Web服务运行的IP地址，默认为**127.0.0.1**。 | `swanlab watch -h 0.0.0.0`：将实验看板Web服务的IP地址设置为0.0.0.0 |\n| `-l`, `--logdir` | 设置实验看板Web服务读取的日志文件路径，默认为`swanlog`。 | `swanlab watch --logdir ./logs`：将当前目录下的logs文件夹设置为日志文件读取路径 |\n| `--help` | 查看终端帮助信息。 | `swanlab watch --help` |\n\n## 介绍\n\n本地启动SwanLab[离线看板](/zh/guide_cloud/self_host/offline-board.md)。  \n在创建SwanLab实验时（并设置mode=\"local\"），会在本地目录下创建一个日志文件夹（默认名称为`swanlog`），使用`swanlab watch`可以本地离线打开实验看板，查看指标图表和配置。\n\n## 使用案例\n\n### 打开SwanLab离线看板\n\n首先，我们找到日志文件夹（默认名称为`swanlog`），然后在命令行执行下面的命令：\n\n```bash\nswanlab watch -l [logfile_path]\n```\n\n其中`logfile_path`是日志文件夹的路径，可以是绝对路径或相对路径。如果你的日志文件夹名称是默认的`swanlog`，那么也可以直接用`swanlab watch`启动而无需`-l`选项。\n\n执行命令后，会看到下面的输出：\n```bash{6}\nswanlab watch -l [logf"}
{"idx": 19, "path": "D:\\mcpserver\\md\\cli-swanlab-watch.md", "title": "swanlab watch", "level": 1, "start_line": 2, "end_line": 55, "sha": "a0ce3d00f9084d0da8380553be816aca", "text": "对路径或相对路径。如果你的日志文件夹名称是默认的`swanlog`，那么也可以直接用`swanlab watch`启动而无需`-l`选项。\n\n执行命令后，会看到下面的输出：\n```bash{6}\nswanlab watch -l [logfile_path]\n\n*swanlab: Try to explore the swanlab experiment logs in: [logfile_path]\n*swanlab: SwanLab Experiment Dashboard ready in 465ms\n\n        ➜  Local:   http://127.0.0.1:5092\n```\n\n访问提供的URL，即可访问SwanLab离线看板。\n\n### 设置IP和端口号\n\n我们可以通过`-h`参数设置IP，`-p`参数设置端口号。  \n比如我们希望能够在本地访问云服务器上的离线看板，那么需要在云服务器上开启实验看板时，设置IP为0.0.0.0：\n\n```bash\nswanlab watch -h 0.0.0.0\n```\n\n如果需要设置端口的话：\n```bash\nswanlab watch -h 0.0.0.0 -p 8080\n```"}
{"idx": 20, "path": "D:\\mcpserver\\md\\environment-variable.md", "title": "环境变量", "level": 1, "start_line": 2, "end_line": 5, "sha": "1ffec849f3a13d54d772df37ef67d6f2", "text": "[⚙️完整环境变量1 -> Github](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/env.py)、[⚙️完整环境变量2 -> Github](https://github.com/SwanHubX/SwanLab-Toolkit/blob/main/swankit/env.py)"}
{"idx": 21, "path": "D:\\mcpserver\\md\\environment-variable.md", "title": "全局配置", "level": 2, "start_line": 6, "end_line": 13, "sha": "a1f38655344deb14de270cf7660ea66b", "text": "| 环境变量 | 描述 | 默认值 |\n| --- | --- | --- |\n| `SWANLAB_SAVE_DIR` | SwanLab 全局文件夹保存的路径 | 用户主目录下的 `.swanlab` 文件夹 |\n| `SWANLAB_LOG_DIR` | SwanLab 解析日志文件保存的路径 | 当前运行目录的 `swanlog` 文件夹 |\n| `SWANLAB_MODE` | SwanLab 的解析模式，涉及操作员注册的回调。目前有三种模式：`local`、`cloud`、`disabled`。**注意：大小写敏感** | `cloud` |"}
{"idx": 22, "path": "D:\\mcpserver\\md\\environment-variable.md", "title": "服务配置", "level": 2, "start_line": 14, "end_line": 22, "sha": "76a7eae4a4edfbacc1284f9bef14ed9c", "text": "| 环境变量 | 描述 | \n| --- | --- |\n| `SWANLAB_BOARD_PORT` | CLI 离线看板 `swanboard` 服务的端口 |\n| `SWANLAB_BOARD_HOST` | CLI 离线看板 `swanboard` 服务的地址 |\n| `SWANLAB_WEB_HOST` | SwanLab 云端环境的 Web 地址，私有化部署仅需设置此环境变量而无需设置 `SWANLAB_API_HOST` |\n| `SWANLAB_API_HOST` | SwanLab 云端环境的 API 地址 |"}
{"idx": 23, "path": "D:\\mcpserver\\md\\environment-variable.md", "title": "实验配置", "level": 2, "start_line": 23, "end_line": 35, "sha": "58027c181a51ee71c35261fd4e4ce578", "text": "| 环境变量 | 描述 |\n| --- | --- |\n| `SWANLAB_PROJ_NAME` | 项目名称，效果等价于 `swanlab.init(project=\"...\")` |\n| `SWANLAB_WORKSPACE` | 工作空间名称，效果等价于 `swanlab.init(workspace=\"...\")` |\n| `SWANLAB_EXP_NAME` | 实验名称，效果等价于 `swanlab.init(experiment_name=\"...\")` |\n| `SWANLAB_RUN_ID` | 实验运行ID，效果等价于 `swanlab.init(id=\"...\")` |\n| `SWANLAB_RESUME` | 是否断点续训，效果等价于 `swanlab.init(resume=...)`，可选值为 `must`、`allow`、`never` |\n| `SWANLAB_DESCRIPTION` | 实验描述，效果等价于 `swanlab.init(description=\"...\")` |\n| `SWANLAB_TAGS` | 实验标签，效果等价于 `swanlab.init(tags=[...])`，如果你想要添加多个tags，写法为`SWANLAB_TAGS=\"tag1,tag2,tag3\"` |\n| `SWANLAB_DISABLE_GIT` | 是否禁用Git，可选值为 `True`、`False`，当设置为 `True` 时，将不会记录Git信息 |"}
{"idx": 24, "path": "D:\\mcpserver\\md\\environment-variable.md", "title": "登录认证", "level": 2, "start_line": 36, "end_line": 41, "sha": "9aae4aa8cf9c43b676c9ade51d34421c", "text": "| 环境变量 | 描述 |\n| --- | --- | \n| `SWANLAB_API_KEY` | 云端 API Key。登录时会首先查找此环境变量，如果不存在，判断用户是否已登录，未登录则进入登录流程。<br>- 如果 `login` 接口传入字符串，此环境变量无效<br>- 如果用户已登录，此环境变量的优先级高于本地存储的登录信息 |"}
{"idx": 25, "path": "D:\\mcpserver\\md\\environment-variable.md", "title": "其他", "level": 2, "start_line": 42, "end_line": 45, "sha": "608eaff85cbad44730114b46bce8579d", "text": "| 环境变量 | 描述 |\n| --- | --- |\n| `SWANLAB_WEBHOOK` | Webhook 地址。<br> SwanLab 初始化完毕时，如果此环境变量存在，会调用此地址发送消息 |"}
{"idx": 26, "path": "D:\\mcpserver\\md\\py-Audio.md", "title": "swanlab.Audio", "level": 1, "start_line": 2, "end_line": 19, "sha": "afb14ddaadbfc5e0b3fa4e0fe7b66df5", "text": "[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/audio.py)\n\n```python\nAudio(\n    data_or_path: Union[str, np.ndarray],\n    sample_rate: int = 44100,\n    caption: str = None,\n) -> None\n```\n\n| 参数          | 描述                                                                                                     |\n|-------------|--------------------------------------------------------------------------------------------------------|\n| data_or_path | (Union[str, np.ndarray]) 接收音频文件路径、numpy数组。Audio类将判断接收的数据类型做相应的转换。 |\n| sample_rate | (int) 音频的采样率，默认为44100。                                             |\n| caption     | (str) 音频的标签。用于在实验看板中展示音频时进行标记。                                                      |"}
{"idx": 27, "path": "D:\\mcpserver\\md\\py-Audio.md", "title": "介绍", "level": 2, "start_line": 20, "end_line": 25, "sha": "7540740f8619674d9a70656a3b72ab5c", "text": "对各种类型的音频数据做转换，以被`swanlab.log()`记录。\n\n![](/assets/media-audio-1.jpg)"}
{"idx": 28, "path": "D:\\mcpserver\\md\\py-Audio.md", "title": "从numpy array创建", "level": 3, "start_line": 26, "end_line": 62, "sha": "c5acf34e5659e36ccca3ede3921a3080", "text": "记录单个音频：\n\n```python\nimport numpy as np\nimport swanlab\n\nrun = swanlab.init()\n\n# 创建一个numpy array类型的音频\nwhite_noise = np.random.randn(2, 100000)\n# 传入swanlab.Audio，设置采样率\naudio = swanlab.Audio(white_noise, caption=\"white_noise\")\n\nrun.log({\"examples\": audio})\n```\n\n记录多个音频：\n\n```python\nimport numpy as np\nimport swanlab\n\nrun = swanlab.init()\n\n# 创建一个列表\nexamples = []\nfor i in range(3):\n    white_noise = np.random.randn(100000)\n    audio = swanlab.Audio(white_noise, caption=\"audio_{i}\")\n    # 列表中添加swanlab.Audio类型对象\n    examples.append(audio)\n\nrun.log({\"examples\": examples})\n```"}
{"idx": 29, "path": "D:\\mcpserver\\md\\py-Audio.md", "title": "从文件路径创建", "level": 3, "start_line": 64, "end_line": 71, "sha": "a078143ed23a626684a9db1473039993", "text": "```python\nimport swanlab\n\nrun = swanlab.init()\naudio = swanlab.Audio(\"path/to/file\")\n\nrun.log({\"examples\": audio})\n```"}
{"idx": 30, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "swanlab.Image", "level": 1, "start_line": 2, "end_line": 24, "sha": "a6b2cdd10b0e23c1293ca013a2ca8411", "text": "[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/image.py)\n\n```python\nImage(\n    data_or_path: Union[str, np.ndarray, PILImage.Image],\n    mode: str = \"RGB\",\n    caption: str = None,\n    file_type: str = None,\n    size: Union[int, list, tuple] = None,\n) -> None\n```\n\n| 参数        | 描述                                                                                                                                                                   |\n|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data_or_path | (Union[str, np.ndarray, PILImage.Image]) 接收图像文件路径、numpy数组、或者PIL图像。Image类将判断接收的数据类型做相应的转换。                                      |\n| mode      | (str) 图像的 PIL 模式。最常见的是 \"L\"、\"RGB\"、\"RGBA\"。完整解释请参阅：[Pillow mode](https://pillow.read"}
{"idx": 31, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "swanlab.Image", "level": 1, "start_line": 2, "end_line": 24, "sha": "4707bed0868a5139bca923a7c1b3ac53", "text": "                       |\n| mode      | (str) 图像的 PIL 模式。最常见的是 \"L\"、\"RGB\"、\"RGBA\"。完整解释请参阅：[Pillow mode](https://pillow.readthedocs.io/en/stable/handbook/concepts.html#modes)                         |\n| caption   | (str) 图像的标签。用于在实验看板中展示图像时进行标记。                                                                                                                 |\n| file_type | (str) 设置图片的格式，可选['png', 'jpg', 'jpeg', 'bmp']，默认为'png'                                                                                                   |\n| size      | (Union[int, list, tuple]) 设置图像的尺寸，默认保持原图尺寸。如果size设置为int类型，如512，将根据最长边不超过512的标准做图像缩放, [size更多用法](#对传入图像做resize)|"}
{"idx": 32, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "介绍", "level": 2, "start_line": 25, "end_line": 30, "sha": "d1097c3854dd8b6d35ff02e48a47b772", "text": "对各种类型的图像数据做转换，以被`swanlab.log()`记录。\n\n![](/assets/media-image-1.jpg)"}
{"idx": 33, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "从numpy array创建", "level": 3, "start_line": 31, "end_line": 68, "sha": "aa9e63a08b1aefb0d558c96960c0c2e2", "text": "记录单张图像：\n\n```python\nimport numpy as np\nimport swanlab\n\nrun = swanlab.init()\n\n# 1. 创建一个numpy array\nrandom_image = np.random.randint(low=0, high=256, size=(100, 100, 3), dtype=np.uint8)\n# 2. 传入swanlab.Image\nimage = swanlab.Image(random_image, caption=\"random image\")\n\nrun.log({\"examples\": image})\n```\n\n记录多张图像：\n\n```python\nimport numpy as np\nimport swanlab\n\nrun = swanlab.init()\n\n# 创建一个列表\nexamples = []\nfor i in range(3):\n    random_image = np.random.randint(low=0, high=256, size=(100, 100, 3), dtype=np.uint8)\n    image = swanlab.Image(random_image, caption=\"random image\")\n    # 列表中添加swanlab.Image类型对象\n    examples.append(image)\n\n# 记录图列\nrun.log({\"examples\": examples})\n```"}
{"idx": 34, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "从PyTorch Tensor创建", "level": 3, "start_line": 69, "end_line": 85, "sha": "c3c44402039595b373a5f4369243f07e", "text": "`swanlab.Image`支持传入尺寸为[B, C, H, W]与[C, H, W]的Tensor。\n\n```python\nimport torch\nimport swanlab\n\nrun = swanlab.init()\n···\nfor batch, ground_truth in train_dataloader():\n    # 假设batch是尺寸为[16, 3, 256, 256]的tensor\n    tensors = swanlab.Image(batch)\n    run.log({\"examples\": tensors})\n```"}
{"idx": 35, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "从PIL Image创建", "level": 3, "start_line": 87, "end_line": 105, "sha": "e903670fc8d617ccea19e0ff2380abce", "text": "```python\nimport numpy as np\nfrom PIL import Image\nimport swanlab\n\nrun = swanlab.init()\n\n# 创建一个列表\nexamples = []\nfor i in range(3):\n    random_image = np.random.randint(low=0, high=256, size=(100, 100, 3), dtype=np.uint8)\n    pil_image = Image.fromarray(random_image)\n    image = swanlab.Image(pil_image, caption=\"random image\")\n    examples.append(image)\n\nrun.log({\"examples\": examples})\n```"}
{"idx": 36, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "从文件路径创建", "level": 3, "start_line": 107, "end_line": 146, "sha": "bc369e644368ed3508fc99af52f44d09", "text": "```python\nimport swanlab\n\nrun = swanlab.init()\nimage = swanlab.Image(\"path/to/file\", caption=\"random image\")\n\nrun.log({\"examples\": image})\n```\n\n`swanlab.Image`在默认情况下，是以`png`的格式做图像转换与存储。\n\n如果想要用`jpg`格式：\n\n```python{3}\nimage = swanlab.Image(\"path/to/file\",\n                      caption=\"random image\",\n                      file_type=\"jpg\")\n```\n\n### 对传入图像做Resize\n\n在默认情况，`swanlab.Image`不对图像做任何尺寸缩放。  \n\n如果需要放缩图像，我们可以通过设置`size`参数，来调节图像尺寸。\n\n放缩规则为：  \n\n1. 默认: 不对图像做任何缩放\n\n2. `size`为int类型: 如果最长边超过`size`, 则将最长边设为`size`, 另一边等比例缩放; 否则不缩放\n\n3. `size`为list/tuple类型: \n\n    - (int, int): 将图像缩放到宽为size[0], 高为size[1]\n    - (int, None): 将图像缩放到宽为size[0], 高等比例缩放\n    - (None, int): 将缩放缩放到高为size[1], 宽等比例缩放\n\n```python\nprint(im_array.shape)"}
{"idx": 37, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "[1024, 512, 3]", "level": 1, "start_line": 147, "end_line": 149, "sha": "44922890a4a6770cdea96f7081d1ca34", "text": "im1 = swanlab.Image(im_array, size=512)"}
{"idx": 38, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "[512, 256, 3]", "level": 1, "start_line": 150, "end_line": 152, "sha": "0e04b5924b5c8e4cf4c5b4facd316d5b", "text": "im2 = swanlab.Image(im_array, size=(512, 512))"}
{"idx": 39, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "[512, 512, 3]", "level": 1, "start_line": 153, "end_line": 155, "sha": "90b090bf43e5aabc55ff8318a493c372", "text": "im3 = swanlab.Image(im_array, size=(None, 1024))"}
{"idx": 40, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "[2048, 1024, 3]", "level": 1, "start_line": 156, "end_line": 158, "sha": "50f7c3df7a8aeea1d3dc30cc9f655a93", "text": "im4 = swanlab.Image(im_array, size=(256, None))"}
{"idx": 41, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "[256, 128, 3]", "level": 1, "start_line": 159, "end_line": 167, "sha": "09e64f5a13ecdfeec9d0c3fa19706b3d", "text": "```\n\n### 记录Matplotlib图表\n\n```python\nimport swanlab\nimport matplotlib.pyplot as plt"}
{"idx": 42, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "定义横纵坐标的数据", "level": 1, "start_line": 167, "end_line": 171, "sha": "f6a72aa8cfdb96f36f2d61ed88186727", "text": "x = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]"}
{"idx": 43, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "plt创建折线图", "level": 1, "start_line": 171, "end_line": 174, "sha": "1f1375e7f2fa8ac401d452f86647bc1a", "text": "plt.plot(x, y)"}
{"idx": 44, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "添加标题和标签", "level": 1, "start_line": 174, "end_line": 181, "sha": "e257b85a102deb4ca8c557f7731d14c2", "text": "plt.title(\"Examples\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\n\nswanlab.init()"}
{"idx": 45, "path": "D:\\mcpserver\\md\\py-Image.md", "title": "记录plt", "level": 1, "start_line": 181, "end_line": 183, "sha": "25c8e3c2ed1cddc38e7cbcf2c2c7aa14", "text": "swanlab.log({\"example\": swanlab.Image(plt)})\n```"}
{"idx": 46, "path": "D:\\mcpserver\\md\\py-Text.md", "title": "swanlab.Text", "level": 1, "start_line": 2, "end_line": 17, "sha": "ba89c5cfff924fdf3a576a675001bdd4", "text": "[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/text.py)\n\n```python\nText(\n    data: Union[str],\n    caption: str = None,\n) -> None\n```\n\n| 参数    | 描述                                                              |\n|-------|-----------------------------------------------------------------|\n| data  | (Union[str]) 接收字符串。                                      |\n| caption | (str) 文本的标签。用于在实验看板中对data进行标记。                     |"}
{"idx": 47, "path": "D:\\mcpserver\\md\\py-Text.md", "title": "介绍", "level": 2, "start_line": 18, "end_line": 23, "sha": "264013cb40a9a709f959f2c3f67b5fa2", "text": "对文本数据做转换，以被`swanlab.log()`记录。\n\n![](./py-text/show.png)"}
{"idx": 48, "path": "D:\\mcpserver\\md\\py-Text.md", "title": "记录字符串文本", "level": 3, "start_line": 24, "end_line": 48, "sha": "959b0f64ad7d7fdbfe0e6e724746f98e", "text": "记录单个字符串文本：\n\n```python{4}\nimport swanlab\n\nswanlab.init()\ntext = swanlab.Text(\"an awesome text.\")\nswanlab.log({\"examples\": text})\n```\n\n记录多个字符串文本：\n\n```python\nimport swanlab\n\nswanlab.init()\n\nexamples = []\nfor i in range(3):\n    text = swanlab.Text(\"an awesome text.\")\n    examples.append(text)\n\nswanlab.log({\"examples\": examples})\n```"}
{"idx": 49, "path": "D:\\mcpserver\\md\\py-confusion_matrix.md", "title": "swanlab.confusion_matrix", "level": 1, "start_line": 2, "end_line": 19, "sha": "db15c37a8dd5a8b1161a1f335b6c6087", "text": "[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/custom_charts/metrics.py)\n\n```python\nconfusion_matrix(\n    y_true: Union[List, np.ndarray],\n    y_pred: Union[List, np.ndarray],\n    class_names: List[str] = None,\n) -> None\n```\n\n| 参数          | 描述                                                                                                                           |\n|-------------|------------------------------------------------------------------------------------------------------------------------------|\n| y_true      | (Union[List, np.ndarray]) 真实标签，分类问题中的真实类别标签                                                                                    |\n| y_pred      | (Union[List, np.ndarray]) 预测标签，模型预测的类别标签                                                                                        |\n| class_names | (List[str]) 类别名称列表，用于在混淆矩阵中显示类别标签。如果为None，将使用数字索引"}
{"idx": 50, "path": "D:\\mcpserver\\md\\py-confusion_matrix.md", "title": "swanlab.confusion_matrix", "level": 1, "start_line": 2, "end_line": 19, "sha": "6e1a0fc417e43f3e9a574cc04936c42d", "text": "                                                     |\n| class_names | (List[str]) 类别名称列表，用于在混淆矩阵中显示类别标签。如果为None，将使用数字索引作为标签                                                           |"}
{"idx": 51, "path": "D:\\mcpserver\\md\\py-confusion_matrix.md", "title": "介绍", "level": 2, "start_line": 20, "end_line": 25, "sha": "9669f516b0e4fb2ca10eb5e8e13edb53", "text": "绘制混淆矩阵（Confusion Matrix），用于评估分类模型的性能。混淆矩阵展示了模型预测结果与真实标签之间的对应关系，能够直观地显示各类别的预测准确性和错误类型。\n\n混淆矩阵是评估分类模型性能的基础工具，特别适用于多分类问题。"}
{"idx": 52, "path": "D:\\mcpserver\\md\\py-confusion_matrix.md", "title": "基本用法", "level": 3, "start_line": 27, "end_line": 62, "sha": "a4b02062f0f4278fd0062c0b8f99c45a", "text": "```python\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\nimport swanlab\n\n# 加载鸢尾花数据集\niris_data = load_iris()\nX = iris_data.data\ny = iris_data.target\nclass_names = iris_data.target_names.tolist()\n\n# 划分训练集和测试集\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 训练模型\nmodel = xgb.XGBClassifier(objective='multi:softmax', num_class=len(class_names))\nmodel.fit(X_train, y_train)\n\n# 获取预测结果\ny_pred = model.predict(X_test)\n\n# 初始化SwanLab\nswanlab.init(project=\"Confusion-Matrix-Demo\", experiment_name=\"Confusion-Matrix-Example\")\n\n# 记录混淆矩阵\nswanlab.log({\n    \"confusion_matrix\": swanlab.confusion_matrix(y_test, y_pred, class_names)\n})\n\nswanlab.finish()\n```\n\n![](./py-confusion_martix/demo.png)"}
{"idx": 53, "path": "D:\\mcpserver\\md\\py-confusion_matrix.md", "title": "使用自定义类别名称", "level": 3, "start_line": 64, "end_line": 73, "sha": "37405aea10bc26e2a189cad9e9d50261", "text": "```python\n# 定义自定义类别名称\ncustom_class_names = [\"类别A\", \"类别B\", \"类别C\"]\n\n# 记录混淆矩阵\nconfusion_matrix = swanlab.confusion_matrix(y_test, y_pred, custom_class_names)\nswanlab.log({\"confusion_matrix_custom\": confusion_matrix})\n```"}
{"idx": 54, "path": "D:\\mcpserver\\md\\py-confusion_matrix.md", "title": "不使用类别名称", "level": 3, "start_line": 75, "end_line": 82, "sha": "26144291186ea87e1df1177683314c68", "text": "```python\n# 不指定类别名称，将使用数字索引\nconfusion_matrix = swanlab.confusion_matrix(y_test, y_pred)\nswanlab.log({\"confusion_matrix_default\": confusion_matrix})\n```"}
{"idx": 55, "path": "D:\\mcpserver\\md\\py-confusion_matrix.md", "title": "二分类示例", "level": 3, "start_line": 84, "end_line": 108, "sha": "46ce987a94115020119ddae53a47d505", "text": "```python\nimport numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\nimport swanlab\n\n# 生成二分类数据\nX, y = make_classification(n_samples=1000, n_features=20, n_informative=2, n_redundant=10, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# 训练模型\nmodel = xgb.XGBClassifier(use_label_encoder=False, eval_metric='logloss')\nmodel.fit(X_train, y_train)\n\n# 获取预测结果\ny_pred = model.predict(X_test)\n\n# 记录混淆矩阵\nswanlab.log({\n    \"confusion_matrix\": swanlab.confusion_matrix(y_test, y_pred, [\"负类\", \"正类\"])\n})\n```"}
{"idx": 56, "path": "D:\\mcpserver\\md\\py-confusion_matrix.md", "title": "注意事项", "level": 3, "start_line": 109, "end_line": 116, "sha": "466cbe10a6fab1132c66f5d437732469", "text": "1. **数据格式**: `y_true`和`y_pred`可以是列表或numpy数组\n2. **多分类支持**: 此函数支持二分类和多分类问题\n3. **类别名称**: `class_names`的长度应该与类别数量一致\n4. **依赖包**: 需要安装`scikit-learn`和`pyecharts`包\n5. **坐标轴**: sklearn的confusion_matrix左上角为(0,0)，在pyecharts的heatmap中是左下角，函数会自动处理坐标转换\n6. **矩阵解读**: 混淆矩阵中，行表示真实标签，列表示预测标签"}
{"idx": 57, "path": "D:\\mcpserver\\md\\py-converter.md", "title": "swanlab.converter", "level": 1, "start_line": 2, "end_line": 7, "sha": "640b166c4e7e0b54e4d5eb66be65c11d", "text": "将其他日志工具的内容转换为SwanLab项目的API。\n\n- [swanlab.converter.TFBConverter](/guide_cloud/integration/integration-tensorboard)\n- [swanlab.converter.WandbConverter](/guide_cloud/integration/integration-wandb)\n- [swanlab.converter.MLFlowConverter](/guide_cloud/integration/integration-mlflow)"}
{"idx": 58, "path": "D:\\mcpserver\\md\\py-echarts.md", "title": "swanlab.echarts", "level": 1, "start_line": 2, "end_line": 5, "sha": "87896646403413dcfe6865c3fae96241", "text": "<!--@include: @zh/shared/custom-charts.md-->\n\n<!--@include: @zh/shared/custom-charts-3d.md-->"}
{"idx": 59, "path": "D:\\mcpserver\\md\\py-init.md", "title": "swanlab.init", "level": 1, "start_line": 3, "end_line": 44, "sha": "2f27b6af4427177413cc802c4a0054c5", "text": "```python\ninit(\n    project: str = None,\n    workspace: str = None,\n    experiment_name: str = None,\n    description: str = None,\n    tags: List[str] = None,\n    config: Union[dict, str] = None,\n    logdir: str = None,\n    mode: str = \"cloud\",\n    load: str = None,\n    public: bool = None,\n    callbacks: list = None,\n    settings: Settings = None,\n    id: str = None,\n    resume: Union[Literal['must', 'allow', 'never'], bool] = None,\n    reinit: bool = None,\n    **kwargs,\n)\n```\n\n| 参数         | 描述 |\n|-------------|------|\n| project |(str)项目名，如果不指定则取运行目录的名称。|\n| workspace |(str)工作空间，默认将实验同步到你的个人空间下，如果要上传到组织，则填写组织的username。|\n| experiment_name | (str) 实验名称, 如果不指定则取\"swan-1\"这样的`动物名+序号`作为实验名。 |\n| tags       | (list) 实验标签。可以传入多个字符串组成的列表，标签会显示在实验顶部的标签栏。|\n| description   | (str) 实验描述, 如果不指定默认为None。                                   |\n| config       | (dict, str) 实验配置，在此处可以记录一些实验的超参数等信息。支持传入配置文件路径，支持"}
{"idx": 60, "path": "D:\\mcpserver\\md\\py-init.md", "title": "swanlab.init", "level": 1, "start_line": 3, "end_line": 44, "sha": "1c2723306080af19ccbc762d32236f53", "text": "描述, 如果不指定默认为None。                                   |\n| config       | (dict, str) 实验配置，在此处可以记录一些实验的超参数等信息。支持传入配置文件路径，支持yaml和json文件。                   |\n| logdir       | (str) 离线看板日志文件存储路径，默认为`swanlog `。                                 |\n| mode       | (str) 设置swanlab实验创建的模式，可选\"cloud\"、\"local\"、\"offline\"、\"disabled\"，默认设置为\"cloud\"。<br>`cloud`：将实验上传到云端。（公有云和私有化部署）<br>`offline`：仅将实验数据保存到本地。<br>`local`：不上传到云端，但会记录实验数据和一些可被`swanlab watch`打开的数据到本地。<br>`disabled`：不上传也不记录。|\n| load       | (str) 加载的配置文件路径，支持yaml和json文件。|\n| public       | (bool) 设置使用代码直接创建SwanLab项目的可见性，默认为False即私有。|\n| callbacks       | (list) 设置实验回调函数，支持`swankit.callback.SwanKitCallback`的子类。|\n| name       | (str) 与experiment_name效果一致，优先级低于experiment_name。|\n| notes       | (str) 与description效果一致，优先级低于description。|\n| settings       | (dict) 实验配置。支持传入1个`swanlab.Settings`对象。|\n| id       | (str) 上次实验的运行ID，用于恢复上次实验。ID必须为21位字符串。|\n| resume   "}
{"idx": 61, "path": "D:\\mcpserver\\md\\py-init.md", "title": "swanlab.init", "level": 1, "start_line": 3, "end_line": 44, "sha": "930c63e70fe1c9255cecdb2d8f08cc78", "text": "ettings       | (dict) 实验配置。支持传入1个`swanlab.Settings`对象。|\n| id       | (str) 上次实验的运行ID，用于恢复上次实验。ID必须为21位字符串。|\n| resume       | (str) 断点续训模式，可选True、False、\"must\"、\"allow\"、\"never\"，默认取None。<br>`True`： 效果同`resume=\"allow\"`。<br>`False`：效果同`resume=\"never\"`。<br>`must`：你必须传递 `id` 参数，并且实验必须存在。<br>`allow`：如果存在实验，则会resume该实验，否则将创建新的实验。<br>`never`：你不能传递 `id` 参数，将会创建一个新的实验。(即不开启resume的效果)|\n| reinit       | (bool) 是否重新创建实验，如果为True，则每次调用`swanlab.init()`时，会把上一次实验`finish`掉；默认取None。|"}
{"idx": 62, "path": "D:\\mcpserver\\md\\py-init.md", "title": "介绍", "level": 2, "start_line": 45, "end_line": 78, "sha": "87e041834f79affc1cb62062167b217d", "text": "- 在机器学习训练流程中，我们可以将`swandb.init()`添加到训练脚本和测试脚本的开头，SwanLab将跟踪机器学习流程的每个环节。\n\n- `swanlab.init()`会生成一个新的后台进程来将数据记录到实验中，默认情况下，它还会将数据同步到swanlab.cn，以便你可以在线实时看到可视化结果。\n\n- 在使用`swanlab.log()`记录数据之前，需要先调用`swanlab.init()`：\n\n```python\nimport swanlab\n\nswanlab.init()\nswanlab.log({\"loss\": 0.1846})\n```\n\n- 调用`swanlab.init()`会返回一个`SwanLabRun`类型的对象，同样可以执行`log`操作：\n\n```python\nimport swanlab\n\nrun = swanlab.init()\nrun.log({\"loss\": 0.1846})\n```\n\n- 在脚本运行结束时，我们将自动调用`swanlab.finish`来结束SwanLab实验。但是，如果从子进程调用`swanlab.init()`，如在jupyter notebook中，则必须在子进程结束时显式调用`swanlab.finish`。\n\n```python\nimport swanlab\n\nswanlab.init()\nswanlab.finish()\n```"}
{"idx": 63, "path": "D:\\mcpserver\\md\\py-init.md", "title": "设置项目、实验名、描述", "level": 3, "start_line": 82, "end_line": 90, "sha": "d07101aac9df794f0efe105798af2d6a", "text": "```python\nswanlab.init(\n    project=\"cats-detection\",\n    experiment_name=\"YoloX-baseline\",\n    description=\"YoloX检测模型的基线实验，主要用于后续对比。\",\n)\n```"}
{"idx": 64, "path": "D:\\mcpserver\\md\\py-init.md", "title": "设置标签", "level": 3, "start_line": 92, "end_line": 98, "sha": "3fa38869071922a9d4027a93d3ac4eb7", "text": "```python\nswanlab.init(\n    tags=[\"yolo\", \"detection\", \"baseline\"]\n)\n```"}
{"idx": 65, "path": "D:\\mcpserver\\md\\py-init.md", "title": "设置日志文件保存位置", "level": 3, "start_line": 99, "end_line": 108, "sha": "8e277cf6528edca78008ad76efcc2de1", "text": "下面的代码展示了如何将日志文件保存到自定义的目录下：\n\n```python\nswanlab.init(\n    logdir=\"path/to/my_custom_dir\",\n)\n```"}
{"idx": 66, "path": "D:\\mcpserver\\md\\py-init.md", "title": "将实验相关的元数据添加到实验配置中", "level": 3, "start_line": 110, "end_line": 120, "sha": "620036615559dd0326cbd4725e45f168", "text": "```python\nswanlab.init(\n    config={\n        \"learning-rate\": 1e-4,\n        \"model\": \"CNN\",\n    }\n)\n\n```"}
{"idx": 67, "path": "D:\\mcpserver\\md\\py-init.md", "title": "上传到组织", "level": 3, "start_line": 122, "end_line": 128, "sha": "c382d765bc45849d2e0f530a1399fea4", "text": "```python\nswanlab.init(\n    workspace=\"[组织的username]\"\n)\n```"}
{"idx": 68, "path": "D:\\mcpserver\\md\\py-init.md", "title": "插件", "level": 3, "start_line": 129, "end_line": 142, "sha": "728571040d9f854c50367190c7c626fe", "text": "关于插件的更多信息，请参考[插件](/plugin/plugin-index.md)。\n\n```python\nfrom swanlab.plugin.notification import EmailCallback\n\nemail_callback = EmailCallback(...)\n\nswanlab.init(\n    callbacks=[email_callback]\n)\n```"}
{"idx": 69, "path": "D:\\mcpserver\\md\\py-init.md", "title": "断点续训", "level": 3, "start_line": 143, "end_line": 196, "sha": "994b039f5dfbd745ed4513df8b9f426c", "text": "断点续训的意思是，如果你之前有一个状态为`完成`或`中断`的实验，需要补一些实验数据，那么你可以通过`resume`和`id`参数来恢复这个实验。\n\n```python\nswanlab.init(\n    resume=True,\n    id=\"14pk4qbyav4toobziszli\",  # id必须为21位字符串\n)\n```\n\n实验id可以在实验的「环境」选项卡或URL中找到，必须为1个21位字符串。\n\n\n:::tip resume使用场景\n\n1. 之前的训练进程断了，基于checkpoint继续训练时，希望实验图表能和之前的swanlab实验续上，而非创建1个新swanlab实验\n2. 训练和评估分为了两个进程，但希望评估和训练记录在同一个swanlab实验中\n3. config中有一些参数填写有误，希望更新config参数\n\n:::\n\n:::warning ⚠️注意\n\n1. 由项目克隆产生的实验，不能被resume\n\n:::\n\n\n断点续训可以选择三种模式：\n\n1. `allow`：如果项目下存在`id`对应的实验，则会resume该实验，否则将创建新的实验。\n2. `must`：如果项目下存在`id`对应的实验，则会resume该实验，否则将报错\n3. `never`：不能传递 `id` 参数，将会创建一个新的实验。(即不开启resume的效果)\n\n::: info\n`resume=True` 效果同 `resume=\"allow\"`。<br>\n`resume=False` 效果同 `resume=\"never\"`。\n:::\n\n测试代码：\n\n```python\nimport swanlab\n\nrun = swanlab.init()\nswanlab.log({\"loss\": 2, \"acc\":0.4})\nrun.finish()\n\nrun = swanlab.init(resume=True, id=run.id)\nswanlab.log({\"loss\": 0.2, \"acc\": 0.9})\n```"}
{"idx": 70, "path": "D:\\mcpserver\\md\\py-init.md", "title": "过期参数", "level": 2, "start_line": 197, "end_line": 199, "sha": "4f1d9c1d37e1abb0abfa3c0d82dc8da2", "text": "- `cloud`：在v0.3.4被`mode`参数取代。参数仍然可用，且会覆盖掉`mode`的设置。"}
{"idx": 71, "path": "D:\\mcpserver\\md\\py-integration.md", "title": "swanlab.integration", "level": 1, "start_line": 2, "end_line": 17, "sha": "0e90c87ad9a7c1a5152c57e73d31e796", "text": "[源代码](https://github.com/SwanHubX/SwanLab/tree/main/swanlab/integration)\n\nSwanLab与外部项目的集成API。\n\n- [swanlab.integration.accelerate](/guide_cloud/integration/integration-huggingface-accelerate.md)\n- [swanlab.integration.fastai](/guide_cloud/integration/integration-fastai.md)\n- [swanlab.integration.keras](/guide_cloud/integration/integration-keras.md)\n- [swanlab.integration.lightgbm](/guide_cloud/integration/integration-lightgbm.md)\n- [swanlab.integration.mmengine](/guide_cloud/integration/integration-mmengine.md)\n- [swanlab.integration.pytorch_lightning](/guide_cloud/integration/integration-pytorch-lightning.md)\n- [swanlab.integration.sb3](/guide_cloud/integration/integration-sb3.md)\n- [swanlab.integration.torchtune](/guide_cloud/integration/integration-pytorch-torchtune.md)\n- [swanlab.integration.transformers](/guide_cloud/integration/integration-huggingface-transformers.md)\n- [swanlab.int"}
{"idx": 72, "path": "D:\\mcpserver\\md\\py-integration.md", "title": "swanlab.integration", "level": 1, "start_line": 2, "end_line": 17, "sha": "389d60f13611f5b26d47fa7be9884962", "text": "d)\n- [swanlab.integration.transformers](/guide_cloud/integration/integration-huggingface-transformers.md)\n- [swanlab.integration.ultralytics](/guide_cloud/integration/integration-ultralytics.md)\n- [swanlab.integration.xgboost](/guide_cloud/integration/integration-xgboost.md)"}
{"idx": 73, "path": "D:\\mcpserver\\md\\py-log.md", "title": "log", "level": 1, "start_line": 2, "end_line": 19, "sha": "0bf29b5a1c26bf843a8d5ca5741acd3d", "text": "[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/sdk.py)\n\n```python\nlog(\n    data: Dict[str, DataType],\n    step: int = None,\n    print_to_console: bool = False,\n)\n```\n\n| 参数   | 描述                                       |\n|--------|------------------------------------------|\n| data   | (Dict[str, DataType]) 必须。传入一个键值对字典，key为指标名，value为指标值。value支持int、float、可被float()转换的类型、或任何`BaseType`类型。 |\n| step   | (int) 可选，该参数设置了data的步数。如不设置step，则将以0开始，后续每1次step累加1。 |\n| print_to_console | (bool) 可选，默认值为False。当设置为True时，会将data的key和value以字典的形式打印到终端。 |"}
{"idx": 74, "path": "D:\\mcpserver\\md\\py-log.md", "title": "介绍", "level": 2, "start_line": 20, "end_line": 31, "sha": "22e823d93cf6ec347f80636e3050751b", "text": "`swanlab.log`是指标记录的核心API，使用它记录实验中的数据，例如标量、图像、音频和文本。  \n\n最基本的用法是如下面代码所示，这将会将准确率与损失值记录到实验中，生成可视化图表并更新这些指标的汇总值（summary）。：\n\n```python\nswanlab.log({\"acc\": 0.9, \"loss\":0.1462})\n```\n\n除了标量以外，`swanlab.log`支持记录多媒体数据，包括图像、音频、文本等，并在UI上有很好的显示效果。"}
{"idx": 75, "path": "D:\\mcpserver\\md\\py-log.md", "title": "打印传入的字典", "level": 2, "start_line": 32, "end_line": 45, "sha": "658d1e895807b4690db5aa5021643741", "text": "`swanlab.log`支持打印传入的`data`的`key`和`value`到终端，默认情况下不打印。要开启打印的话，需要设置`print_to_console=True`。\n\n```python\nswanlab.log({\"acc\": 0.9, \"loss\":0.1462}, print_to_console=True)\n```\n\n当然，你也可以用这种方式打印：\n\n```python\nprint(swanlab.log({\"acc\": 0.9, \"loss\":0.1462}))\n```"}
{"idx": 76, "path": "D:\\mcpserver\\md\\py-log.md", "title": "更多用法", "level": 2, "start_line": 46, "end_line": 49, "sha": "54a5d3b62c56eb80c73e7c1ac39495d7", "text": "- 记录[图像](/api/py-Image.md)\n- 记录[音频](/api/py-Audio.md)\n- 记录[文本](/api/py-Text.md)"}
{"idx": 77, "path": "D:\\mcpserver\\md\\py-login.md", "title": "swanlab.login", "level": 1, "start_line": 2, "end_line": 46, "sha": "ca3a795c61566bad829767600784a1ee", "text": "``` bash\nlogin(\n    api_key: str = None,\n    host: str = None,\n    web_host: str = None,\n    save: bool = False\n):\n```\n\n| 参数 | 描述 |\n| --- | --- |\n| `api_key` | (str) 身份验证密钥，如果未提供，密钥将从密钥文件中读取。|\n| `host` | (str) SwanLab服务所在的API主机，如果未提供，将使用默认主机（即云端版）|\n| `web_host` | (str) SwanLab服务所在的Web主机，如果未提供，将使用默认主机（即云端版）|\n| `save` | (bool) 是否将API密钥保存到密钥文件中，默认值为False。|\n\n\n## 介绍\n\n在Python代码中登录SwanLab账号，以将实验上传到指定的云端服务器。API Key从你的SwanLab「设置」-「常规」页面中获取。\n\n## 登录到公有云\n\n```python\nimport swanlab\n\nswanlab.login(api_key='your-api-key', save=True)\n```\n\n默认将登录到`swanlab.cn`，即SwanLab公有云服务。\n\n如果需要登录到其他主机，可以指定`host`参数，如`http://localhost:8000`。\n\n将`save`参数设置为`True`，会将登录凭证保存到本地（会覆盖之前保存的凭证），无需再次通过`swanlab.login`或`swanlab login`登录。\n\n**如果你在公共机器上使用，请将`save`参数设置为`False`**，这样不会泄露你的API Key，也避免其他人不小心上传数据到你的空间。\n\n## 登录到私有化服务\n\n```python\nswanlab.login(api_key='your-api-key', host='your-private-host')\n```"}
{"idx": 78, "path": "D:\\mcpserver\\md\\py-molecule.md", "title": "swanlab.Molecule", "level": 1, "start_line": 2, "end_line": 10, "sha": "39094947c9ac688a6c136a668ae2f483", "text": "[源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/object3d/molecule.py)\n\n| 参数        | 描述       |\n|-----------|------------------------------------------------------------------------------------------------|\n| pdb_data | (str) 接收的PDB数据（字符串形式）                                 |      \n| caption   | (str) 分子对象的标签。用于在实验看板中展示分子对象时进行标记。                |"}
{"idx": 79, "path": "D:\\mcpserver\\md\\py-molecule.md", "title": "简介", "level": 2, "start_line": 11, "end_line": 16, "sha": "f081c7040c5b3bcc46346056aa435c1f", "text": "对各种类型的生物化学分子做转换，以被`swanlab.log()`记录。\n\n![molecule gif](/assets/molecule.gif)"}
{"idx": 80, "path": "D:\\mcpserver\\md\\py-molecule.md", "title": "从RDKit Mol对象创建", "level": 2, "start_line": 18, "end_line": 29, "sha": "51302181ca52f3ae48207b10608b8644", "text": "```python\nfrom rdkit import Chem\nimport swanlab\n\nmol = Chem.MolFromSmiles(\"CCO\")\nmolecule = swanlab.Molecule.from_mol(mol, caption=\"Ethanol\")\n\nswanlab.init(project=\"molecule_demo\")\nswanlab.log({\"molecule\": molecule})\n```"}
{"idx": 81, "path": "D:\\mcpserver\\md\\py-molecule.md", "title": "从PDB文件创建", "level": 2, "start_line": 31, "end_line": 40, "sha": "28cab08997418ab28521483f744fd5ce", "text": "```python\nimport swanlab\n\nmolecule = swanlab.Molecule.from_pdb(\"path/to/your/pdb/file.pdb\")\n\nswanlab.init(project=\"molecule_demo\")\nswanlab.log({\"molecule\": molecule})\n```"}
{"idx": 82, "path": "D:\\mcpserver\\md\\py-molecule.md", "title": "从SDF文件创建", "level": 2, "start_line": 42, "end_line": 51, "sha": "d100f7623f0ea38f86ef8822391946fd", "text": "```python\nimport swanlab\n\nmolecule = swanlab.Molecule.from_sdf(\"path/to/your/sdf/file.sdf\")\n\nswanlab.init(project=\"molecule_demo\")\nswanlab.log({\"molecule\": molecule})\n```"}
{"idx": 83, "path": "D:\\mcpserver\\md\\py-molecule.md", "title": "从SMILES字符串创建", "level": 2, "start_line": 53, "end_line": 62, "sha": "2f4c62fbd88a7c1fdf04b49027c29eca", "text": "```python\nimport swanlab\n\nmolecule = swanlab.Molecule.from_smiles(\"CCO\")\n\nswanlab.init(project=\"molecule_demo\")\nswanlab.log({\"molecule\": molecule})\n```"}
{"idx": 84, "path": "D:\\mcpserver\\md\\py-molecule.md", "title": "从MOL文件创建", "level": 2, "start_line": 64, "end_line": 71, "sha": "5fabf9eaa1005f55884fd6191b332847", "text": "```python\nimport swanlab\n\nmolecule = swanlab.Molecule.from_mol(\"path/to/your/mol/file.mol\")\n\nswanlab.init(project=\"molecule_demo\")\nswanlab.log({\"molecule\": molecule})\n```"}
{"idx": 85, "path": "D:\\mcpserver\\md\\py-object3d.md", "title": "swanlab.Object3D", "level": 1, "start_line": 2, "end_line": 11, "sha": "0c6c723f95d43c07cbaa19854a6ed362", "text": "[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/object3d/object3d.py)\n\n| 参数        | 描述   |\n|-----------|---------------|\n| data | (Union[np.ndarray, str, Path]) 接收点云文件路径、numpy数组。Object3D类将判断接收的数据类型做相应的转换。                                      |              |\n| caption   | (str) 3D对象的标签。用于在实验看板中展示3D对象时进行标记。                                                                                                                 |"}
{"idx": 86, "path": "D:\\mcpserver\\md\\py-object3d.md", "title": "介绍", "level": 2, "start_line": 12, "end_line": 17, "sha": "80dc8149d4f82c188ff6f44d486340f2", "text": "对各种类型的点云数据做转换，以被`swanlab.log()`记录。\n\n![](./py-object3d/demo.png)"}
{"idx": 87, "path": "D:\\mcpserver\\md\\py-object3d.md", "title": "从文件/字典创建", "level": 3, "start_line": 18, "end_line": 108, "sha": "1b53918723d377da132b130c057df756", "text": "::: warning 示例文件\ndata.swanlab.pts.json：[Google Drive下载](https://drive.google.com/file/d/1mFill-BXw3cirPHwIHndb1wNX4pWvSXb/view)\n:::\n\n文件的格式为`json`，内容格式如下：\n\n```json\n{\n    \"points\": [\n        [x1, y1, z1, r1, g1, b1],\n        [x2, y2, z2, r2, g2, b2],\n        ...\n    ],\n    // （可选）检测框，用于点云检测等任务，会框住对应位置\n    \"boxes\": [\n        {\n            \"color\": [r, g, b],\n            \"corners\": [[x1,y1,z1], ..., [x8,y8,z8]],\n            // （可选）检测框的标签文本，会在视图中显示\n            \"label\": \"class_name\",\n            // （可选）置信度，会在视图中显示\n            \"score\": 0.95,\n        },\n        ...\n    ]\n}\n```\n\n**json文件参数详细解释：**\n\n* **`points`**：\n    * 这是一个数组，用于存储3D点云数据。\n    * 每个元素都是一个包含6个数值的数组 `[x, y, z, r, g, b]`，分别代表：\n        * `x`, `y`, `z`：点的三维坐标。\n        * `r`, `g`, `b`：点的颜色，分别代表红、绿、蓝三个通道的数值，通常取值范围为0-255。\n\n* **`boxes`**（可选）：\n    * 这是一个数组，用于存储3D检测框数据。\n    * 每个元素都是一个对象，代表一个检测框，包含以下字段：\n        * **`color`**：检测框的颜色，`[r, g, b]` "}
{"idx": 88, "path": "D:\\mcpserver\\md\\py-object3d.md", "title": "从文件/字典创建", "level": 3, "start_line": 18, "end_line": 108, "sha": "f4d999c0ad391a81df110589b96df1d9", "text": "\n* **`boxes`**（可选）：\n    * 这是一个数组，用于存储3D检测框数据。\n    * 每个元素都是一个对象，代表一个检测框，包含以下字段：\n        * **`color`**：检测框的颜色，`[r, g, b]` 数组，代表红、绿、蓝三个通道的数值。\n        * **`corners`**：检测框的八个顶点坐标，`[[x1, y1, z1], ..., [x8, y8, z8]]` 数组，每个元素是一个三维坐标 `[x, y, z]`。\n        * **`label`**（可选）：检测框的标签文本，字符串类型，用于在视图中显示检测框的类别。\n        * **`score`**（可选）：检测框的置信度，数值类型，通常取值范围为0-1，用于表示检测框的可靠程度。\n\n---\n\n使用SwanLab从`json`文件中记录3D点云数据：\n\n::: code-group\n\n```python [Object3D]\nimport swanlab\n\nswanlab.init()\n\nobj = swanlab.Object3D(\"data.swanlab.pts.json\", caption=\"3d_point_cloud\")\nswanlab.log({\"examples\": obj})\n```\n\n```python [Object3D.from_point_data]\nimport swanlab\n\nswanlab.init()\n\nwith open(\"data.swanlab.pts.json\", \"r\") as f:\n    cloud_point = json.load(f)\n\nobj = swanlab.Object3D.from_point_data(\n    points=cloud_point[\"points\"],\n    boxes=cloud_point[\"boxes\"],\n    caption=\"3d_point_cloud\"\n)\n\nswanlab.log({\"examples\": obj})\n```\n:::\n\n\n"}
{"idx": 89, "path": "D:\\mcpserver\\md\\py-object3d.md", "title": "从文件/字典创建", "level": 3, "start_line": 18, "end_line": 108, "sha": "b7375061f0cbc257d1b48dc789f9f435", "text": "int[\"points\"],\n    boxes=cloud_point[\"boxes\"],\n    caption=\"3d_point_cloud\"\n)\n\nswanlab.log({\"examples\": obj})\n```\n:::\n\n\n<video controls src=\"./py-object3d/video.mp4\"></video>\n\n<br>\n\n### 从numpy数组创建\n\n::: code-group\n\n```python [从坐标创建]\nimport numpy as np"}
{"idx": 90, "path": "D:\\mcpserver\\md\\py-object3d.md", "title": "Example 1: Create point cloud from coordinates", "level": 1, "start_line": 108, "end_line": 122, "sha": "ed4d09548abd856d69590bdb6663da73", "text": "points_xyz = np.array([\n    [0, 0, 0],  # Point1: x=0, y=0, z=0\n    [1, 1, 1],  # Point2: x=1, y=1, z=1\n    [2, 0, 1]   # Point3: x=2, y=0, z=1\n])\n\ncloud_xyz = swanlab.Object3D(points_xyz, caption=\"Basic XYZ Points\")\nswanlab.log({\"examples\": cloud_xyz})\n```\n\n```python [从坐标和类别创建]\nimport numpy as np"}
{"idx": 91, "path": "D:\\mcpserver\\md\\py-object3d.md", "title": "Example 2: Create point cloud with categories", "level": 1, "start_line": 122, "end_line": 136, "sha": "5b9246e2f864483cfd7f6bb4da8d2d18", "text": "points_xyzc = np.array([\n    [0, 0, 0, 0],  # Point1: xyz + category 0\n    [1, 1, 1, 1],  # Point2: xyz + category 1\n    [2, 0, 1, 2]   # Point3: xyz + category 2\n])\n\ncloud_xyzc = swanlab.Object3D(points_xyzc, caption=\"Points with Categories\")\nswanlab.log({\"examples\": cloud_xyzc})\n```\n\n```python [从坐标和RGB创建]\nimport numpy as np"}
{"idx": 92, "path": "D:\\mcpserver\\md\\py-object3d.md", "title": "Example 3: Create point cloud with RGB colors", "level": 1, "start_line": 136, "end_line": 162, "sha": "c7169ece6646b7de5a769cdac9f1d3f6", "text": "points_xyzrgb = np.array([\n    [0, 0, 0, 255, 0, 0],    # Point1: xyz + red\n    [1, 1, 1, 0, 255, 0],    # Point2: xyz + green\n    [2, 0, 1, 0, 0, 255]     # Point3: xyz + blue\n])\n\ncloud_xyzrgb = swanlab.Object3D(points_xyzrgb, caption=\"Colored Points\")\nswanlab.log({\"examples\": cloud_xyzrgb})\n```\n:::\n\n### 单步记录多个点云\n\n```python\nimport swanlab\n\n...\n\ncloud1 = swanlab.Object3D(points1, caption=\"cloud1\")\ncloud2 = swanlab.Object3D(points2, caption=\"cloud2\")\ncloud3 = swanlab.Object3D(points3, caption=\"cloud3\")\n\n...\n\nswanlab.log({\"examples\": [cloud1, cloud2, cloud3, ...]})\n```"}
{"idx": 93, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "swanlab.OpenApi", "level": 1, "start_line": 2, "end_line": 15, "sha": "d56c47384f68353589e77e4cea51b6cf", "text": "基于 SwanLab 云端功能, 在 SDK 端提供访问 **开放 API（OpenAPI）** 的能力, 允许用户通过编程方式在本地环境中操作云端 **实验/项目/工作空间** 资源。\n\n![](./py-openapi/logo.jpg)\n\n通过开放 API 的形式, 用户可以在本地编程环境中:\n\n- 获取实验数据、个人信息、工作空间信息、项目列表等\n- 进行实验的自动管理（如查询、组织、元数据编辑等）\n- 更方便地与其他工具集成（如 CI/CD、实验调度等）\n\n利用好此特性可极大提升 SDK 的灵活性和可扩展性, 方便构建高级用法或扩展体系"}
{"idx": 94, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "支持的API列表", "level": 2, "start_line": 16, "end_line": 31, "sha": "9836d8bab60ae58b0d9647b684016f6a", "text": "下表列出了SwanLab OpenAPI支持的所有方法，点击API名称可跳转到详细说明：\n\n| API名称 | 分类 | 功能描述 | Ready |\n|---------|------|----------|------|\n| [`list_workspaces`](#list-workspaces) | WorkSpace | 获取当前用户的所有工作空间(组织)列表 | ✅ |\n| [`list_projects`](#list-projects) | Project | 获取指定工作空间下的所有项目列表 | ✅ |\n| [`delete_project`](#delete-project) | Project | 删除一个项目 | ✅ |\n| [`list_experiments`](#list-experiments) | Experiment | 获取指定项目下的所有实验列表 | ✅ |\n| [`get_experiment`](#get-experiment) | Experiment | 获取一个实验的详细信息（实验名、配置、环境等） | ✅ |\n| [`get_summary`](#get-summary) | Experiment | 获取一个实验的Summary信息，包含实验跟踪指标的最终值和最大最小值 | ✅ |\n| [`get_metrics`](#get-metrics) | Experiment | 获取一个实验指标的值 |  ✅ |\n| [`delete_experiment`](#delete-experiment) | Experiment | 删除一个实验 | ✅ |"}
{"idx": 95, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "介绍", "level": 2, "start_line": 32, "end_line": 58, "sha": "9753a467b41088464789cc933d4d123b", "text": "> 前置条件：需要在编程环境下登录过SwanLab账号。\n\n要使用 SwanLab 的开放 API, 只需实例化一个 `OpenApi` 对象。\n\n```python\nfrom swanlab import OpenApi\n\nmy_api = OpenApi() # 使用本地登录信息\nprint(my_api.list_workspaces().data) # 获取当前用户的工作空间列表\n```\n\n如果你需要获取其他用户的数据：\n```python\nfrom swanlab import OpenApi\n\nother_api = OpenApi(api_key='other_api_key') # 使用另一个账户的api_key\nprint(other_api.list_workspaces().data)\n```\n\n\n具体来说, **OpenApi**的认证逻辑如下：\n\n1. 如果显式提供了`api_key`参数, 则优先使用该`api_key`进行身份认证, 可以在[这里](https://swanlab.cn/space/~/settings)查看自己的 API 密钥；\n2. 否则,使用本地的认证信息。"}
{"idx": 96, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "实验ID `exp_id`", "level": 3, "start_line": 61, "end_line": 68, "sha": "73047237e73b3f82dd497dcaf6ba46d4", "text": "实验的唯一标识符**CUID**, 即`exp_id`, 可通过`list_experiments`方法获取对应的`cuid`字段\n\n要查看某一个实验的CUID, 可在云端版网页的\"环境\"标签页查看\"实验ID\"一行, 点击即可复制此实验的CUID\n\n![](./py-openapi/exp_id.png)"}
{"idx": 97, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "工作空间名 `username`", "level": 3, "start_line": 69, "end_line": 79, "sha": "038eb91183728819a28810b486b4b837", "text": "工作空间名即`username`, 用于标识用户所在的工作空间:\n\n- 若为个人空间, `username`即为用户的用户名\n- 若为组织空间, `username`为该组织的组织ID\n\n`username`可以通过`list_workspaces`方法获取, 返回的工作空间列表中每个元素的`username`字段即为工作空间名\n\n一般的, 若在开放API调用中不指定`username`, 则**默认**为当前用户的个人空间"}
{"idx": 98, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "模型定义", "level": 2, "start_line": 80, "end_line": 109, "sha": "b80651de7d22dbda4948eb87f0bf87f4", "text": "在使用开放 API 时, 获取到的部分云端资源组成较为复杂, 如实验、项目等, 难以用简单的Python数据类型表示\n\n因此, 这些资源在开放API的返回值中被定义为了对象, 支持 IDE 的自动补全与类型检查, 从而方便用户进行操作\n\n例如, 要获取一个实验对象的开始时间, 可以用:\n\n```python\napi_response: ApiResponse = my_api.get_experiment(project=\"project1\", exp_cuid=\"cuid1\")\nmy_exp: Experiment = api_response.data\ncreated_time: str = my_exp.createdAt\n```\n\n或者, 要获取一个项目对象所属工作空间的名字, 可以用:\n\n```python\napi_response: ApiResponse = my_api.list_projects()\nmy_project: Project = api_response.data[0]\nworkspace_name: str = my_project.group[\"name\"]\n```\n\n对于一个模型, 其属性可通过以下三种方式访问:\n\n- `my_exp.createdAt`\n- `my_exp[\"createdAt\"]`\n- `my_exp.get(\"createdAt\")`\n\n> Note: 模型可以通过字典风格访问, 但不是真正的字典, 可以通过`my_exp_dict: Dict = my_exp.model_dump()`获取此时模型对应的字典"}
{"idx": 99, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "API 响应 `ApiResponse`", "level": 3, "start_line": 110, "end_line": 119, "sha": "8108ce3c74d61957e9ee8dfe9c36f535", "text": "开放 API 方法返回`swanlab.api.openapi.types.ApiResponse`对象, 包含以下字段:\n\n| 字段 | 类型 |描述 |\n| --- | --- | --- |\n| `code` | `int` | HTTP 状态码 |\n| `errmsg` | `str` | 错误信息, 如果状态码不为`2XX`则非空 |\n| `data` | `Any` | 返回的具体数据, 下面API文档中提到的返回值即为该字段 |"}
{"idx": 100, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "实验模型 `Experiment`", "level": 3, "start_line": 120, "end_line": 135, "sha": "3d3cfcab475e16dbb2c384e8809b58aa", "text": "实验对象的类型为`swanlab.api.openapi.types.Experiment`, 包含以下字段:\n\n| 字段 | 类型 | 描述 |\n| --- | --- | --- |\n| `cuid` | `str` | 实验CUID, 唯一标识符 |\n| `name` | `str` | 实验名 |\n| `description` | `str` | 实验描述 |\n| `state` | `str` | 实验状态, `FINISHED` 或 `RUNNING` |\n| `show` | `bool` | 显示状态 |\n| `createdAt` | `str` | 创建时间, 格式如 `2024-11-23T12:28:04.286Z` |\n| `finishedAt` | `str` | 完成时间, 格式如 `2024-11-23T12:28:04.286Z`, 若不存在则为 None |\n| `user` | `Dict[str, str]` | 实验创建者, 包含 `username` 与 `name` |\n| `profile` | `dict` | 详细包含了实验的所有配置信息, 如用户自定义配置与Python运行环境等 |"}
{"idx": 101, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "项目模型 `Project`", "level": 3, "start_line": 136, "end_line": 150, "sha": "488069f1b77c1bb0177ede5ba40dbe82", "text": "项目对象的类型为`swanlab.api.openapi.types.Project`, 包含以下字段:\n\n| 字段 | 类型 | 描述 |\n| --- | --- | --- |\n| `cuid` | `str` | 项目CUID, 唯一标识符 |\n| `name` | `str` | 项目名 |\n| `description` | `str` | 项目描述 |\n| `visibility` | `str` | 可见性, `PUBLIC` 或 `PRIVATE` |\n| `createdAt` | `str` | 创建时间, 格式如 `2024-11-23T12:28:04.286Z` |\n| `updatedAt` | `str` | 更新时间, 格式如 `2024-11-23T12:28:04.286Z` |\n| `group` | `Dict[str, str]` | 工作空间信息, 包含 `type`, `username`, `name` |\n| `count` | `Dict[str, int]` | 项目的统计信息, 如实验个数, 协作者数量等 |"}
{"idx": 102, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "OpenAPIs", "level": 2, "start_line": 151, "end_line": 156, "sha": "755f9225e36c52afa93f5e6312bf6868", "text": "每个开放 API 都是`OpenApi`对象的一个方法\n\n下面是所有可用的SwanLab 开放 API"}
{"idx": 103, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "`list_workspaces`", "level": 4, "start_line": 159, "end_line": 566, "sha": "dd740c15f6e518449009186773de61d7", "text": "获取当前用户的所有工作空间(组织)列表。\n\n**返回值**\n\n`data` `(List[Dict])`: 用户加入的工作空间列表, 每个元素是一个字典, 包含工作空间的基础信息:\n\n| 字段 | 类型 | 描述 |\n| --- | --- | --- |\n| `name` | `str` | 工作空间名称 |\n| `username` | `str` | 工作空间唯一标识(用于组织相关的 URL) |\n| `role` | `str` | 用户在该工作空间中的角色, 为 `OWNER` 或 `MEMBER` |\n\n**示例**\n\n::: code-group\n\n```python [获取工作区列表]\nfrom swanlab import OpenApi\nmy_api = OpenApi()\n\nmy_api.list_workspaces().data\n\"\"\"\n[\n    {\n        \"name\": \"workspace1\",\n        \"username\": \"kites-test3\",\n        \"role\": \"OWNER\"\n    },\n    {\n        \"name\": \"hello-openapi\",\n        \"username\": \"kites-test2\",\n        \"role\": \"MEMBER\"\n    }\n]\n\"\"\"\n```\n\n```python [获取第一个工作区名称]\nfrom swanlab import OpenApi\nmy_api = OpenApi()\n\nmy_api.list_workspaces().data[0][\"name\"]\n\"\"\"\n\"workspace1\"\n\"\"\"\n```\n\n```python [获取响应状态码]\nfrom swanlab import OpenApi\nmy_api = OpenApi()\n\nmy_api.list_workspaces().code\n\"\"\"\n200\n\"\"\"\n```\n\n:::\n\n<br>\n\n---\n\n### Experiment\n\n#### `li"}
{"idx": 104, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "`list_workspaces`", "level": 4, "start_line": 159, "end_line": 566, "sha": "b2eb0b72d0aa04ec12e125c076eedc61", "text": "port OpenApi\nmy_api = OpenApi()\n\nmy_api.list_workspaces().code\n\"\"\"\n200\n\"\"\"\n```\n\n:::\n\n<br>\n\n---\n\n### Experiment\n\n#### `list_experiments`\n\n获取指定项目下的所有实验列表\n\n**方法参数**\n\n| 参数  | 类型 | 描述 |\n| --- | --- | --- |\n| `project` | `str` | 项目名 |\n| `username` | `str` | 工作空间名, 默认为用户个人空间 |\n\n**返回值**\n\n`data` `(List[Experiment])`: 包含实验[(Experiment)](#实验模型-experiment)对象的列表\n\n**示例**\n\n::: code-group\n\n```python [获取实验列表]\nmy_api.list_experiments(project=\"project1\").data\n\"\"\"\n[\n    {\n        \"cuid\": \"cuid1\",\n        \"name\": \"experiment1\",\n        \"description\": \"Description 1\",\n        \"state\": \"RUNNING\",\n        \"show\": true,\n        \"createdAt\": \"2024-11-23T12:28:04.286Z\",\n        \"finishedAt\": null,\n        \"user\": {\n            \"username\": \"kites-test3\",\n            \"name\": \"Kites Test\"\n        },\n        \"profile\": {\n            \"config\": {\n                \"lr\": 0.001,\n                \"epochs\": 10\n            }\n  "}
{"idx": 105, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "`list_workspaces`", "level": 4, "start_line": 159, "end_line": 566, "sha": "b1a935649acf619627bdea991e0c4fc6", "text": "\n        \"profile\": {\n            \"config\": {\n                \"lr\": 0.001,\n                \"epochs\": 10\n            }\n        }\n    },\n    ...\n]\n\"\"\"\n```\n\n```python [获取第一个实验的CUID]\nmy_api.list_experiments(project=\"project1\").data[0].cuid\n\"\"\"\n\"cuid1\"\n\"\"\"\n```\n\n```python [获取第一个实验的名称]\nmy_api.list_experiments(project=\"project1\").data[0].name\n\"\"\"\n\"experiment1\"\n\"\"\"\n```\n\n:::\n\n<br>\n\n#### `get_experiment`\n\n获取一个实验的详细信息\n\n**方法参数**\n\n| 参数 | 类型 | 描述 |\n| --- | --- | --- |\n| `project` | `str` | 项目名 |\n| `exp_id` | `str` | 实验CUID, 唯一标识符, 可通过`list_experiments`获取, 也可在云端版实验\"环境\"标签页查看 |\n| `username` | `str` | 工作空间名, 默认为用户个人空间 |\n\n**返回值**\n\n`data` `(Experiment)`: 返回一个实验[(Experiment)](#实验模型-experiment)类型的对象, 包含实验的详细信息\n\n**示例**\n\n::: code-group\n\n```python [获取实验信息]\nmy_api.get_experiment(project=\"project1\", exp_id=\"cuid1\").data\n\"\"\"\n{\n    \"cuid\": \"cuid1\",\n    \"name\": \"experiment1\",\n    \"description\": \"This is a test experim"}
{"idx": 106, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "`list_workspaces`", "level": 4, "start_line": 159, "end_line": 566, "sha": "82aeca56473cffaab82e27e62ada80e7", "text": "\", exp_id=\"cuid1\").data\n\"\"\"\n{\n    \"cuid\": \"cuid1\",\n    \"name\": \"experiment1\",\n    \"description\": \"This is a test experiment\",\n    \"state\": \"FINISHED\",\n    \"show\": true,\n    \"createdAt\": \"2024-11-23T12:28:04.286Z\",\n    \"finishedAt\": \"2024-11-25T15:56:48.123Z\",\n    \"user\": {\n        \"username\": \"kites-test3\",\n        \"name\": \"Kites Test\"\n    },\n    \"profile\": {\n        \"conda\": \"...\",\n        \"requirements\": \"...\",\n        ...\n    }\n}\n\"\"\"\n```\n\n```python [获取实验的状态]\nmy_api.get_experiment(project=\"project1\", exp_id=\"cuid1\").data.state\n\"\"\"\n\"FINISHED\"\n\"\"\"\n```\n\n```python [获取实验的创建者用户名]\nmy_api.get_experiment(project=\"project1\", exp_id=\"cuid1\").data.user[\"username\"]\n\"\"\"\n\"kites-test3\"\n\"\"\"\n```\n\n:::\n\n<br>\n\n#### `delete_experiment`\n\n删除一个实验\n\n**方法参数**\n| 参数 | 类型 | 描述 |\n| --- | --- | --- |\n| `project` | `str` | 项目名 |\n| `exp_id` | `str` | 实验CUID, 唯一标识符, 可通过`list_experiments`获取, 也可在云端版实验\"环境\"标签页查看 |\n| `usernam"}
{"idx": 107, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "`list_workspaces`", "level": 4, "start_line": 159, "end_line": 566, "sha": "e2b634b217f7aa8075b13d9145480383", "text": "\n| `project` | `str` | 项目名 |\n| `exp_id` | `str` | 实验CUID, 唯一标识符, 可通过`list_experiments`获取, 也可在云端版实验\"环境\"标签页查看 |\n| `username` | `str` | 工作空间名, 默认为用户个人空间 |\n\n**返回值**\n`data` `(dict)`: 空字典, 仅表示删除操作成功\n\n**示例**\n\n::: code-group\n\n```python [删除实验]\nmy_api.delete_experiment(project=\"project1\", exp_id=\"cuid1\")\n```\n\n:::\n\n<br>\n\n#### `get_summary`\n\n获取一个实验的概要信息, 包含实验跟踪指标的最终值和最大最小值, 以及其对应的步数\n\n**方法参数**\n\n| 参数 | 类型 | 描述 |\n| --- | --- | --- |\n| `project` | `str` | 项目名 |\n| `exp_id` | `str` | 实验CUID, 唯一标识符, 可通过`list_experiments`获取, 也可在云端版实验\"环境\"标签页查看 |\n| `username` | `str` | 工作空间名, 默认为用户个人空间 |\n\n**返回值**\n\n`data` `(Dict[str, Dict])`: 返回一个字典, 包含实验的概要信息\n\n字典中的每个键是一个指标名称, 值是一个结构如下的字典:\n\n| 字段 | 类型 | 描述 |\n| --- | --- | --- |\n| `step` | `int` | 最后一个步数 |\n| `value` | `float` | 最后一个步数的指标值 |\n| `min` | `Dict[str, float]` | 最小值对应的步数和指标值 |\n| `max` | `Dict[str, float]` | 最大值对应的步数和指标值 |\n\n\n**示例**\n\n::: code-group\n\n```python [获取实验概要信息]\nm"}
{"idx": 108, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "`list_workspaces`", "level": 4, "start_line": 159, "end_line": 566, "sha": "50fa6a4e33c283019428da10243a2259", "text": " float]` | 最小值对应的步数和指标值 |\n| `max` | `Dict[str, float]` | 最大值对应的步数和指标值 |\n\n\n**示例**\n\n::: code-group\n\n```python [获取实验概要信息]\nmy_api.get_summary(project=\"project1\", exp_id=\"cuid1\").data\n\"\"\"\n{\n    \"loss\": {\n        \"step\": 47,\n        \"value\": 0.1907215012216071,\n        \"min\": {\n            \"step\": 33,\n            \"value\": 0.1745886406861026\n        },\n        \"max\": {\n            \"step\": 0,\n            \"value\": 0.7108771095136294\n        }\n    },\n    ...\n}\n\"\"\"\n```\n\n\n```python [获取指标的最大值]\nmy_api.get_summary(project=\"project1\", exp_id=\"cuid1\").data[\"loss\"][\"max\"][\"value\"]\n\"\"\"\n0.7108771095136294\n\"\"\"\n```\n\n```python [获取指标最小值所在步]\nmy_api.get_summary(project=\"project1\", exp_id=\"cuid1\").data[\"loss\"][\"min\"][\"step\"]\n\"\"\"\n33\n\"\"\"\n```\n:::\n\n<br>\n\n#### get_metrics\n\n获取一个实验的指标值\n\n**方法参数**\n\n| 参数 | 类型 | 描述 |\n| --- | --- | --- |\n| `exp_id` | `str` | 实验CUID, 唯一标识符, 可通过`list_experiments`获取, 也可在云端版实验\"环境\"标签页查看 |\n| `keys`"}
{"idx": 109, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "`list_workspaces`", "level": 4, "start_line": 159, "end_line": 566, "sha": "ec5dea867fb892c01941c308bfba7089", "text": " 类型 | 描述 |\n| --- | --- | --- |\n| `exp_id` | `str` | 实验CUID, 唯一标识符, 可通过`list_experiments`获取, 也可在云端版实验\"环境\"标签页查看 |\n| `keys` | `Union[str, List[str]]` | 指标名列表, 即swanlab.log({key: value})中的key, 可在网站查看, 也可通过`get_summary`获取 |\n\n**返回值**\n\n`data` `(DataFrame)`: 返回一个DataFrame, 包含实验的指标值\n\n**示例**\n\n::: code-group\n\n```python [获取实验指标]\nmy_api.get_metrics(exp_id=\"cuid1\", keys=[\"loss\", \"acc\"]).data\n\"\"\"\n          loss  loss_timestamp       acc  acc_timestamp\nstep                                                   \n1     0.336772   1751712864853  0.670422  1751712864852\n2     0.338035   1751712864858  0.830018  1751712864857\n3     0.282654   1751712864862  0.794594  1751712864862\n4     0.258216   1751712864866  0.832750  1751712864866\n5     0.097542   1751712864871  0.901684  1751712864871\n6     0.092955   1751712864875  0.907544  1751712864875\n7     0.149327   1751712864879  0.942524  1751712864879\n8     0.131"}
{"idx": 110, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "`list_workspaces`", "level": 4, "start_line": 159, "end_line": 566, "sha": "2f7ba65f71b0c06cbaef85679799d261", "text": "   0.092955   1751712864875  0.907544  1751712864875\n7     0.149327   1751712864879  0.942524  1751712864879\n8     0.131631   1751712864884  0.921309  1751712864883\n\"\"\"\n```\n\n:::\n\n\n<br>\n\n---\n\n\n### Project\n\n#### `list_projects`\n\n获取指定工作空间下的所有项目列表\n\n**方法参数**\n\n| 参数  | 类型 | 描述 |\n| --- | --- | --- |\n| `username` | `str` | 工作空间名, 默认为用户个人空间 |\n| `detail` | `bool` | 是否项目统计信息, 默认为 True |\n\n**返回值**\n\n`data` `(List[Project])`: 包含项目[(Project)](#项目模型-project)对象的列表\n\n**示例**\n\n::: code-group\n\n```python [获取项目列表]\nmy_api.list_projects().data\n\"\"\"\n[\n    {\n        \"cuid\": \"project1\",\n        \"name\": \"Project 1\",\n        \"description\": \"Description 1\",\n        \"visibility\": \"PUBLIC\",\n        \"createdAt\": \"2024-11-23T12:28:04.286Z\",\n        \"updatedAt\": null,\n        \"group\": {\n            \"type\": \"PERSON\",\n            \"username\": \"kites-test3\",\n            \"name\": \"Kites Test\"\n        },\n        \"count\": {\n          "}
{"idx": 111, "path": "D:\\mcpserver\\md\\py-openapi.md", "title": "`list_workspaces`", "level": 4, "start_line": 159, "end_line": 566, "sha": "8b1eadb69dc5a88338986728b8a0d698", "text": "ERSON\",\n            \"username\": \"kites-test3\",\n            \"name\": \"Kites Test\"\n        },\n        \"count\": {\n            \"experiments\": 4,\n            \"contributors\": 1,\n            \"children\": 0,\n            \"runningExps\": 0\n        }\n    },\n    ...\n]\n\"\"\"\n```\n\n:::\n\n#### `delete_project`\n\n删除一个项目\n\n**方法参数**\n\n| 参数 | 类型 | 描述 |\n| --- | --- | --- |\n| `project` | `str` | 项目名 |\n| `username` | `str` | 工作空间名, 默认为用户个人空间 |\n\n**返回值**\n\n`data` `(dict)`: 空字典, 仅表示删除操作成功\n\n**示例**\n\n::: code-group\n\n```python [删除项目]\nmy_api.delete_project(project=\"project1\")\n```\n\n:::\n\n<br>"}
{"idx": 112, "path": "D:\\mcpserver\\md\\py-other.md", "title": "get_run", "level": 2, "start_line": 4, "end_line": 15, "sha": "da7f0687a95fa161530fdc120ce58e10", "text": "获取当前运行的实验对象（`SwanLabRun`）。\n\n```python\nrun = swanlab.init(...)\n\n...\n\nrun = swanlab.get_run()\n```"}
{"idx": 113, "path": "D:\\mcpserver\\md\\py-other.md", "title": "get_url", "level": 2, "start_line": 16, "end_line": 23, "sha": "772d7dcc9580cd0db00487afba612c81", "text": "获取实验的URL（cloud模式，否则为None）。\n\n```python\nprint(swanlab.get_url())\n```"}
{"idx": 114, "path": "D:\\mcpserver\\md\\py-other.md", "title": "get_project_url", "level": 2, "start_line": 24, "end_line": 31, "sha": "8819d30f85a1a9fa40a5fa3412c38a03", "text": "获取项目的URL（cloud模式，否则为None）。\n\n```python\nprint(swanlab.get_project_url())\n```"}
{"idx": 115, "path": "D:\\mcpserver\\md\\py-pr_curve.md", "title": "swanlab.pr_curve", "level": 1, "start_line": 2, "end_line": 19, "sha": "16237035e741e7cab5bf4faa99300fa1", "text": "[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/custom_charts/metrics.py)\n\n```python\npr_curve(\n    y_true: Union[List, np.ndarray],\n    y_pred_proba: Union[List, np.ndarray],\n    title: Optional[str, bool] = None,\n) -> None\n```\n\n| 参数          | 描述                                                                                                                           |\n|-------------|------------------------------------------------------------------------------------------------------------------------------|\n| y_true      | (Union[List, np.ndarray]) 真实标签，二分类问题中的真实类别标签（0或1）                                                                        |\n| y_pred_proba | (Union[List, np.ndarray]) 预测概率，模型对正类的预测概率值（范围0-1）                                                                        |\n| title       | (Optional[str, bool]) 是否显示图表标题，默认为None                     "}
{"idx": 116, "path": "D:\\mcpserver\\md\\py-pr_curve.md", "title": "swanlab.pr_curve", "level": 1, "start_line": 2, "end_line": 19, "sha": "491fd76dbda601dd6c89bfc41ed189c8", "text": "                                           |\n| title       | (Optional[str, bool]) 是否显示图表标题，默认为None                                                                                                           |"}
{"idx": 117, "path": "D:\\mcpserver\\md\\py-pr_curve.md", "title": "介绍", "level": 2, "start_line": 20, "end_line": 25, "sha": "29569f7e48ffcd4c32b544fac76056dd", "text": "绘制PR（Precision-Recall）曲线，用于评估二分类模型的性能。PR曲线展示了在不同阈值下精确率（Precision）和召回率（Recall）的关系。\n\nPR曲线特别适用于处理不平衡数据集，能够更好地评估模型在少数类上的表现。"}
{"idx": 118, "path": "D:\\mcpserver\\md\\py-pr_curve.md", "title": "基本用法", "level": 3, "start_line": 27, "end_line": 57, "sha": "cc6863a7967479a5bcb6c36819584c80", "text": "```python\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\nimport swanlab\n\n# 生成示例数据\nX, y = make_classification(n_samples=1000, n_features=20, n_informative=2, n_redundant=10, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# 训练模型\nmodel = xgb.XGBClassifier(use_label_encoder=False, eval_metric='logloss')\nmodel.fit(X_train, y_train)\n\n# 获取预测概率\ny_pred_proba = model.predict_proba(X_test)[:, 1]\n\n# 初始化SwanLab\nswanlab.init(project=\"PR-Curve-Demo\", experiment_name=\"PR-Curve-Example\")\n\n# 记录PR曲线\nswanlab.log({\n    \"pr_curve\": swanlab.pr_curve(y_test, y_pred_proba, title=True)\n})\n\nswanlab.finish()\n```\n\n![](./py-pr_curve/demo.png)"}
{"idx": 119, "path": "D:\\mcpserver\\md\\py-pr_curve.md", "title": "自定义标题", "level": 3, "start_line": 59, "end_line": 73, "sha": "09c8715e11cf7d8333e87e42754e6dd7", "text": "```python\n# 不显示标题(默认)\npr_curve = swanlab.pr_curve(y_test, y_pred_proba, title=False)\nswanlab.log({\"pr_curve_no_title\": pr_curve})\n\n# 显示标题\npr_curve = swanlab.pr_curve(y_test, y_pred_proba, title=True)\nswanlab.log({\"pr_curve_with_title\": pr_curve})\n\n# 自定义标题\npr_curve = swanlab.pr_curve(y_test, y_pred_proba, title=\"demo\")\nswanlab.log({\"pr_curve_with_custom_title\": pr_curve})\n```"}
{"idx": 120, "path": "D:\\mcpserver\\md\\py-pr_curve.md", "title": "注意事项", "level": 3, "start_line": 74, "end_line": 80, "sha": "89f0a270e2845bf07a5ca66387e264f1", "text": "1. **数据格式**: `y_true`和`y_pred_proba`可以是列表或numpy数组\n2. **二分类**: 此函数专用于二分类问题\n3. **概率值**: `y_pred_proba`应该是模型对正类的预测概率，范围在0-1之间\n4. **依赖包**: 需要安装`scikit-learn`和`pyecharts`包\n5. **AUC计算**: 函数会自动计算PR曲线下的面积（AUC），但不会默认在标题中显示"}
{"idx": 121, "path": "D:\\mcpserver\\md\\py-register-callback.md", "title": "swanlab.register_callback", "level": 1, "start_line": 3, "end_line": 16, "sha": "132ceb2bc17fb08dc394dff92abcc175", "text": "```python\n@should_call_before_init(\"After calling swanlab.init(), you can't call it again.\")\ndef register_callbacks(\n    self,\n    callbacks: List[SwanKitCallback]\n) -> None:\n```\n\n| 参数 | 类型 | 描述 |\n| --- | --- | --- |\n| `callbacks` | `List[SwanKitCallback]` | 回调函数列表 |"}
{"idx": 122, "path": "D:\\mcpserver\\md\\py-register-callback.md", "title": "介绍", "level": 2, "start_line": 17, "end_line": 40, "sha": "52038779ace16a4583797881b33e7335", "text": "使用`swanlab.register_callbacks()`注册回调函数，以在SwanLab的执行生命周期中调用。\n\n```python {3}\nfrom swanlab.plugin.writer import EmailCallback\nemail_callback = EmailCallback(...)\nswanlab.register_callbacks([email_callback])\n\nswanlab.init(...)\n```\n\n效果等价于：\n\n```python\nfrom swanlab.plugin.writer import EmailCallback\nemail_callback = EmailCallback(...)\n\nswanlab.init(\n    ...\n    callbacks=[email_callback]\n)\n```\n\n**场景**：比如你使用时的是SwanLab与Transformers的集成，那么你要找到`swanlab.init()`是不容易的。那么，你可以在`trainer.train()`调用前，用`swanlab.register_callbacks()`注册回调函数，实现插件的注入。"}
{"idx": 123, "path": "D:\\mcpserver\\md\\py-roc_curve.md", "title": "swanlab.roc_curve", "level": 1, "start_line": 2, "end_line": 19, "sha": "6d3d03661ecf3a632c1d3fc8e808a4ee", "text": "[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/custom_charts/metrics.py)\n\n```python\nroc_curve(\n    y_true: Union[List, np.ndarray],\n    y_pred_proba: Union[List, np.ndarray],\n    title: Optional[str, bool] = None,\n) -> None\n```\n\n| 参数          | 描述                                                                                                                           |\n|-------------|------------------------------------------------------------------------------------------------------------------------------|\n| y_true      | (Union[List, np.ndarray]) 真实标签，二分类问题中的真实类别标签（0或1）                                                                        |\n| y_pred_proba | (Union[List, np.ndarray]) 预测概率，模型对正类的预测概率值（范围0-1）                                                                        |\n| title       | (Optional[str, bool]) 是否显示图表标题，默认为None                    "}
{"idx": 124, "path": "D:\\mcpserver\\md\\py-roc_curve.md", "title": "swanlab.roc_curve", "level": 1, "start_line": 2, "end_line": 19, "sha": "f36e711faace5c492f6dab0129f0ed6a", "text": "                                            |\n| title       | (Optional[str, bool]) 是否显示图表标题，默认为None                                                                                                           |"}
{"idx": 125, "path": "D:\\mcpserver\\md\\py-roc_curve.md", "title": "介绍", "level": 2, "start_line": 20, "end_line": 25, "sha": "9c6192e86b6f6860f48df668fd4a49c8", "text": "绘制ROC（Receiver Operating Characteristic）曲线，用于评估二分类模型的性能。ROC曲线展示了在不同阈值下真正率（True Positive Rate）和假正率（False Positive Rate）的关系。\n\nROC曲线是评估分类模型性能的重要工具，能够直观地展示模型在不同决策阈值下的表现。"}
{"idx": 126, "path": "D:\\mcpserver\\md\\py-roc_curve.md", "title": "基本用法", "level": 3, "start_line": 27, "end_line": 57, "sha": "913cd1631a8d525335fcf94aa2dd32c9", "text": "```python\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\nimport swanlab\n\n# 生成示例数据\nX, y = make_classification(n_samples=1000, n_features=20, n_informative=2, n_redundant=10, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# 训练模型\nmodel = xgb.XGBClassifier(use_label_encoder=False, eval_metric='logloss')\nmodel.fit(X_train, y_train)\n\n# 获取预测概率\ny_pred_proba = model.predict_proba(X_test)[:, 1]\n\n# 初始化SwanLab\nswanlab.init(project=\"ROC-Curve-Demo\", experiment_name=\"ROC-Curve-Example\")\n\n# 记录ROC曲线\nswanlab.log({\n    \"roc_curve\": swanlab.roc_curve(y_test, y_pred_proba, title=True)\n})\n\nswanlab.finish()\n```\n\n![](./pr-roc_curve/demo.png)"}
{"idx": 127, "path": "D:\\mcpserver\\md\\py-roc_curve.md", "title": "自定义标题", "level": 3, "start_line": 59, "end_line": 73, "sha": "744d5913bfdd87c23fa6890631727589", "text": "```python\n# 不显示标题(默认)\nroc_curve = swanlab.roc_curve(y_test, y_pred_proba, title=False)\nswanlab.log({\"roc_curve_no_title\": roc_curve})\n\n# 显示标题\nroc_curve = swanlab.roc_curve(y_test, y_pred_proba, title=True)\nswanlab.log({\"roc_curve_with_title\": roc_curve})\n\n# 自定义标题\nroc_curve = swanlab.roc_curve(y_test, y_pred_proba, title=\"demo\")\nswanlab.log({\"roc_curve_with_custom_title\": roc_curve})\n```"}
{"idx": 128, "path": "D:\\mcpserver\\md\\py-roc_curve.md", "title": "与其他指标一起使用", "level": 3, "start_line": 75, "end_line": 87, "sha": "582ce217a2791ef7285eee3feb6cc406", "text": "```python\nimport swanlab\n\n# 记录多个ML指标\nswanlab.log({\n    \"roc_curve\": swanlab.roc_curve(y_test, y_pred_proba),\n    \"pr_curve\": swanlab.pr_curve(y_test, y_pred_proba),\n    \"accuracy\": accuracy_score(y_test, y_pred),\n    \"f1_score\": f1_score(y_test, y_pred)\n})\n```"}
{"idx": 129, "path": "D:\\mcpserver\\md\\py-roc_curve.md", "title": "注意事项", "level": 3, "start_line": 88, "end_line": 95, "sha": "940291201dbc4ac1773506049d9f6730", "text": "1. **数据格式**: `y_true`和`y_pred_proba`可以是列表或numpy数组\n2. **二分类**: 此函数专用于二分类问题\n3. **概率值**: `y_pred_proba`应该是模型对正类的预测概率，范围在0-1之间\n4. **依赖包**: 需要安装`scikit-learn`和`pyecharts`包\n5. **AUC计算**: 函数会自动计算ROC曲线下的面积（AUC），但不会在标题中显示\n6. **曲线特征**: ROC曲线从(0,0)开始，到(1,1)结束，对角线表示随机分类器的性能"}
{"idx": 130, "path": "D:\\mcpserver\\md\\py-run.md", "title": "run", "level": 1, "start_line": 2, "end_line": 6, "sha": "f174ff31c093765ea7b3759affb901b3", "text": "run 指的是 `swanlab.init()` 返回的 `SwanLabRun` 对象，这里介绍run具有的一些方法。  \n(逐步更新中...)"}
{"idx": 131, "path": "D:\\mcpserver\\md\\py-run.md", "title": "public", "level": 2, "start_line": 7, "end_line": 32, "sha": "c44d957eb34c772920a5c582ea3d3ed9", "text": "public存储了SwanLabRun的一些公共信息，包括：\n- `project_name`: 项目名称\n- `version`: 版本\n- `run_id`: 实验ID\n- `swanlog_dir`: swanlog日志目录的路径\n- `run_dir`: 运行目录的路径\n- `cloud`: 云端信息\n    - `project_name`: 项目名称（仅在cloud模式时有效）\n    - `project_url`: 项目在云端的URL（仅在cloud模式时有效）\n    - `experiment_name`: 实验名称（仅在cloud模式时有效）\n    - `experiment_url`: 实验在云端的URL（仅在cloud模式时有效）\n\n以字典形式获取public信息：\n\n```python\nimport swanlab\nrun = swanlab.init()\nprint(run.public.json())\n```\n\n比如，你想要获取实验的URL，可以这样：\n\n```python\nprint(run.public.cloud.experiment_url)\n```"}
{"idx": 132, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "swanlab.Settings", "level": 1, "start_line": 3, "end_line": 36, "sha": "b5e188ad0c14576884f0eb0d4c8d4766", "text": "```python\nSettings(\n    model_config = ConfigDict(frozen=True),\n    metadata_collect: StrictBool = True,\n    collect_hardware: StrictBool = True,\n    collect_runtime: StrictBool = True,\n    security_mask: StrictBool = True,\n    requirements_collect: StrictBool = True,\n    conda_collect: StrictBool = False,\n    hardware_monitor: StrictBool = True,\n    disk_io_dir: DirectoryPath = Field(...),\n    upload_interval: PositiveInt = 1,\n    max_log_length: int = Field(ge=500, le=4096, default=1024),\n    log_proxy_type: Literal[\"all\", \"stdout\", \"stderr\", \"none\"] = \"all\",\n)\n```\n\n| 参数                     | 类型            | 描述                                                                              |\n|:-----------------------|:--------------|:--------------------------------------------------------------------------------|\n| `metadata_collect`     | StrictBool    | 是否开启元数据采集。默认值为 `True`。          "}
{"idx": 133, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "swanlab.Settings", "level": 1, "start_line": 3, "end_line": 36, "sha": "e50c4e7179c3829bc5d2d3f822f16445", "text": "-------------------------------------------|\n| `metadata_collect`     | StrictBool    | 是否开启元数据采集。默认值为 `True`。                                                          |\n| `collect_hardware`     | StrictBool    | 是否采集当前系统环境的硬件信息。默认值为 `True`。                                                    |\n| `collect_runtime`      | StrictBool    | 是否采集运行时信息。默认值为 `True`。                                                          |\n| `security_mask`        | StrictBool    | 是否自动隐藏隐私信息，如 api_key 等。开启后将在检测到隐私信息时，自动将其替换为加密字符（****）。默认值为 `True`。             |\n| `requirements_collect` | StrictBool    | 是否采集 Python 环境信息 (`pip list`)。默认值为 `True`。                                      |\n| `conda_collect`        | StrictBool    | 是否采集 Conda 环境信息。默认值为 `False`。                                                   |\n| `hardware_monitor`     | StrictBool    | 是否开启硬件监控。如果 `metadata_collect` 关闭，则此项无效。默认值为 `True`。          "}
{"idx": 134, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "swanlab.Settings", "level": 1, "start_line": 3, "end_line": 36, "sha": "6420f0a2fc12a50cb475be2b1ccec0e5", "text": "             |\n| `hardware_monitor`     | StrictBool    | 是否开启硬件监控。如果 `metadata_collect` 关闭，则此项无效。默认值为 `True`。                            |\n| `disk_io_dir`          | DirectoryPath | 磁盘 IO 监控的路径。默认值为系统根目录 (`/` 或 `C:\\`)。                                            |\n| `hardware_interval`    | PositiveInt   | 硬件监控采集间隔，以秒为单位，最小值为5秒。                                                          |\n| `backup`               | PositiveInt   | 日志备份开启功能，默认值为 `True`。开启后，日志将被备份到本地（默认为`swanlog`目录）。      |\n| `upload_interval`      | PositiveInt   | 日志上传间隔（单位：秒）。默认值为 `1`。                                                          |\n| `max_log_length`       | int           | 终端日志上传单行最大字符数（范围：500-4096）。默认值为 `1024`。                                         |\n| `log_proxy_type`       | Literal       | 日志代理类型，会影响实验的日志选项卡记录的内容。默认值为 `\"all\"`。\"stdout\" 表示只代理标准输出流，\"stderr\" 表示只代理标准错误流，\"all\" 表示代理标准输出流和标准错误流，\"none\" 表示不代理日志。|"}
{"idx": 135, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "介绍", "level": 2, "start_line": 37, "end_line": 46, "sha": "3a7c994bd78b738375d5b320f89082a0", "text": "- `swanlab.Settings`类用于和管理 SwanLab 的全局功能开关和设置。\n\n- 在`import swanlab`时，会创建一个默认的全局设置，各个设置及其默认值详见上表。\n\n- 如果我们要对某些设置进行调整，需要通过新建一个`Settings`实例如`new_settings`，在实例化时传入想要修改的配置参数，然后要通过运行`swanlab.merge_settings(new_settings)`来对全局设置进行更新。\n\n- 值得注意的是，`merge_settings()`方法只在`swanlab.init()`被调用之前可用，这意味着，在使用`swanlab`的过程中，一旦`swanlab.init()`被调用，全局设置将不再能被更改。"}
{"idx": 136, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "更新全局设置", "level": 3, "start_line": 49, "end_line": 55, "sha": "f37287eab7e657234e02ce23a650a380", "text": "::: code-group\n\n```python [方式一]\nimport swanlab"}
{"idx": 137, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "创建新的设置对象", "level": 1, "start_line": 55, "end_line": 69, "sha": "f6d09e691f3aa10a0f534b605dff7b8d", "text": "new_settings = swanlab.Settings(\n    metadata_collect=False,\n    hardware_monitor=False,\n    upload_interval=5\n)\n\nswanlab.init(settings=new_settings)\n...\n```\n\n```python [方式二]\nimport swanlab"}
{"idx": 138, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "创建新的设置对象", "level": 1, "start_line": 69, "end_line": 76, "sha": "71d72e9d8f104228be5366fdd15a09f2", "text": "new_settings = swanlab.Settings(\n    metadata_collect=False,\n    hardware_monitor=False,\n    upload_interval=5\n)"}
{"idx": 139, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "更新全局设置", "level": 1, "start_line": 76, "end_line": 91, "sha": "02e789fa1f1c188372a0bf24157d0b3f", "text": "swanlab.merge_settings(new_settings)\n\nswanlab.init()\n...\n```\n\n:::\n\n### 记录 conda 环境信息\n\n```python\nimport swanlab\nfrom swanlab import Settings"}
{"idx": 140, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "创建新的设置对象", "level": 1, "start_line": 91, "end_line": 96, "sha": "198d55c81eb72975a6ca7bf1a495fc74", "text": "new_settings = Settings(\n    conda_collect=True  # 默认不开启\n)"}
{"idx": 141, "path": "D:\\mcpserver\\md\\py-settings.md", "title": "更新全局设置", "level": 1, "start_line": 96, "end_line": 102, "sha": "651025e1bb8a38e97a778c025d0f2d77", "text": "swanlab.merge_settings(new_settings)\n\nswanlab.init()\n...\n```"}
{"idx": 142, "path": "D:\\mcpserver\\md\\py-sync-mlflow.md", "title": "swanlab.sync_mlflow", "level": 1, "start_line": 2, "end_line": 4, "sha": "5f414d35c6678854b1ae3de51878d09a", "text": "将MLFlow项目同步到SwanLab，[文档](/guide_cloud/integration/integration-mlflow.md)"}
{"idx": 143, "path": "D:\\mcpserver\\md\\py-sync-tensorboard.md", "title": "swanlab.sync_tensorboard", "level": 1, "start_line": 2, "end_line": 3, "sha": "941208467fce94825da9624af6b268ba", "text": "将tensorboard/tensorboardX的指标同步到SwanLab, [文档](/guide_cloud/integration/integration-tensorboard.md)"}
{"idx": 144, "path": "D:\\mcpserver\\md\\py-sync-wandb.md", "title": "swanlab.sync_wandb", "level": 1, "start_line": 2, "end_line": 3, "sha": "0c4323ae2ddf2f087eaf815d0886e9d3", "text": "将wandb的指标同步到SwanLab, [文档](/guide_cloud/integration/integration-wandb.md)"}
{"idx": 145, "path": "D:\\mcpserver\\md\\py-video.md", "title": "swanlab.Video", "level": 1, "start_line": 2, "end_line": 17, "sha": "90f417a4a8a9a91532b6d7a3dd252848", "text": "[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/video/__init__.py)\n\n```python\nVideo(\n    data_or_path: str,\n    caption: str = None,\n) -> None\n```\n\n| 参数          | 描述                                                                                                     |\n|-------------|--------------------------------------------------------------------------------------------------------|\n| data_or_path | (str) 接收视频文件路径。目前仅支持GIF格式文件。 |\n| caption     | (str) 视频的标签。用于在实验看板中展示视频时进行标记。                                                      |"}
{"idx": 146, "path": "D:\\mcpserver\\md\\py-video.md", "title": "介绍", "level": 2, "start_line": 18, "end_line": 25, "sha": "d9243502d40dfcd2deb3c0a5032d11bf", "text": "对视频数据做转换，以被`swanlab.log()`记录。目前仅支持GIF格式的视频文件。\n\n::: warning 格式限制\n目前 `swanlab.Video` 仅支持 GIF 格式的文件路径。其他视频格式暂不支持。\n:::"}
{"idx": 147, "path": "D:\\mcpserver\\md\\py-video.md", "title": "记录GIF视频文件", "level": 3, "start_line": 26, "end_line": 52, "sha": "ede3fd155f8fc4cf57bd514b98bda49e", "text": "记录单个GIF视频：\n\n```python\nimport swanlab\n\nswanlab.init()\nvideo = swanlab.Video(\"path/to/video.gif\", caption=\"训练过程演示\")\nswanlab.log({\"video\": video})\n```\n\n记录多个GIF视频：\n\n```python\nimport swanlab\n\nswanlab.init()\n\nexamples = []\nfor i in range(3):\n    video = swanlab.Video(f\"video_{i}.gif\", caption=f\"视频示例 {i}\")\n    examples.append(video)\n\nswanlab.log({\"examples\": examples})\n```"}
{"idx": 148, "path": "D:\\mcpserver\\md\\py-video.md", "title": "创建GIF视频示例", "level": 2, "start_line": 53, "end_line": 109, "sha": "5ecdbfacf4e270409212377e0d08a6dc", "text": "以下是一个创建GIF动画并记录的完整示例：\n\n```python\nimport os.path\nimport random\nfrom PIL import Image as PILImage\nfrom PIL import ImageDraw\nimport swanlab\n\nswanlab.init()\n\n# 创建一个GIF动画\ndef create_mock_gif(output_path, width=200, height=200, frames=10, duration=100):\n    \"\"\"\n    创建一个简单的mock GIF动画\n    \n    参数:\n        output_path: 输出GIF文件路径\n        width: 图像宽度(像素)\n        height: 图像高度(像素)\n        frames: 动画帧数\n        duration: 每帧显示时间(毫秒)\n    \"\"\"\n    images = []\n    \n    for i in range(frames):\n        # 创建一个新的RGB图像\n        img = PILImage.new('RGB', (width, height), color=(255, 255, 255))\n        draw = ImageDraw.Draw(img)\n        \n        # 随机生成颜色\n        r = random.randint(0, 255)\n        g = random.randint(0, 255)\n        b = random.randint(0, 255)\n        \n        # 在图像上绘制一个随机的圆形\n        x = random.randint(0, width)\n        y = random.randint(0, height)\n        radius = random.randint(10, min(width, heigh"}
{"idx": 149, "path": "D:\\mcpserver\\md\\py-video.md", "title": "创建GIF视频示例", "level": 2, "start_line": 53, "end_line": 109, "sha": "5c5af82ee8e6191a136668b0a7e157ea", "text": " x = random.randint(0, width)\n        y = random.randint(0, height)\n        radius = random.randint(10, min(width, height) // 2)\n        draw.ellipse([x - radius, y - radius, x + radius, y + radius], fill=(r, g, b))\n        \n        # 将当前帧添加到列表中\n        images.append(img)\n    \n    # 保存为GIF动画\n    images[0].save(output_path, save_all=True, append_images=images[1:], duration=duration, loop=0)\n\n# 创建GIF文件\ngif_path = \"test.gif\"\ncreate_mock_gif(gif_path, width=300, height=300, frames=15, duration=200)\n\n# 记录到SwanLab\nswanlab.log({\"video\": swanlab.Video(gif_path, caption=\"这是一个测试视频\")})\n```"}
{"idx": 150, "path": "D:\\mcpserver\\md\\py-video.md", "title": "使用场景", "level": 2, "start_line": 110, "end_line": 118, "sha": "f34fa8b9bc35eac92ab4e9a56f876d32", "text": "`swanlab.Video` 适用于以下场景：\n\n1. **训练过程可视化**：记录模型训练过程中的动态变化\n2. **实验结果展示**：展示实验结果的动态演示\n3. **数据可视化**：将时间序列数据转换为动画展示\n4. **模型行为分析**：记录模型在不同输入下的动态响应"}
{"idx": 151, "path": "D:\\mcpserver\\md\\py-video.md", "title": "注意事项", "level": 2, "start_line": 119, "end_line": 123, "sha": "1de5d40c551f980f98ea327aa8e4d2c3", "text": "1. **文件格式**：目前仅支持 GIF 格式，不支持 MP4、AVI 等其他视频格式\n2. **文件大小**：建议控制 GIF 文件大小，过大的文件可能影响加载速度\n3. **帧率控制**：创建 GIF 时可以通过 `duration` 参数控制播放速度\n4. **文件路径**：确保提供的文件路径正确且文件存在"}
